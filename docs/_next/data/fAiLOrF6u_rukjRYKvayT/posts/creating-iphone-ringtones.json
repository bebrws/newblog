{"pageProps":{"title":"Creating iPhone Ringtones with a Cello and FFMPEG","dateString":"2022-03-30","slug":"creating-iphone-ringtones","description":"","tags":["zsh"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"A very useful post about making iPhone ringtones\"), mdx(\"p\", null, \"Messing around with my Cello I realized I would much rather here this than my ringtone options I had.\"), mdx(\"p\", null, \"So I recorded the audio on my phone and sent it to myself. This produced an m4a file.\"), mdx(\"p\", null, \"So how do I get this thing in the right format and looped correctly and on my phone?\"), mdx(\"p\", null, \"Well FFMPEG can do all of this from the command line.\"), mdx(\"p\", null, \"So first off, as you are working on your ringtone and want to here what you have, it is easiest to just play it from the command line with:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    afplay someFile.m4a\\n\")), mdx(\"p\", null, \"So I made a function to get audio from second 2 up to second 4 (seen in the atrim argument below).\\nPlay this 50 times (the orignal time + 49 times you see in the aloop argument).\\nThen you have to calculate the size of the output. I believe this then is:\\n2 seconds of audio \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \" 50 times = 100 seconds of audio\\n100 seconds of audio \"), \" 48000 samples per second = 480000 samples ( == 100\", \"*\", \"48000 you see in the size argument )\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"function trimAndLoopRingtone(){\\n    # Trim and Loop sound\\n    ffmpeg -i $1 -filter_complex \\\" \\\\\\n        [0:a] \\\\\\n            atrim=2:4,asetpts=PTS-STARTPTS, \\\\\\n            asetrate=48000,aloop=49:size=100*48000 \\\\\\n        [outa]\\\" -map \\\"[outa]\\\" -c:a aac \\\"looped$1\\\"\\n}\\n\")), mdx(\"p\", null, \"And I ran:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    trimAndLoopRingtone celloAudio.m4a\\n\")), mdx(\"p\", null, \"to get a file named: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"loopedcelloAudio.m4a\")), mdx(\"p\", null, \"Then I needed to cut the duration of this down to be below 40 seconds (Apple limits ringtones to 40 seconds):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"function trimDuratonToBelow40() {\\n    ffmpeg -i $1 -ss 00:00:00 -to 00:00:38 -c:v copy -c:a copy duration$1\\n}\\n\")), mdx(\"p\", null, \"Then I needed to convert this m4a file to an m4r file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"function convertToRingtoneM4R() {\\n    ffmpeg -i $1 -acodec copy -f ipod ringtone.m4r\\n}\\n\")), mdx(\"p\", null, \"Now you have you own fancy custom ringtone. But you have to get this onto your phone\\nand in a way the you can find the ringtone in your settings (Settings -> Sounds & Haptics ).\"), mdx(\"p\", null, \"So you can open up Music.app, plug in your phone, open up your phone in the left hand side of Music.app and drag the m4r file in there.\\nOr dragging it into the IPhone in Finder might have worked as well. I tried both :)\"));\n}\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<div style=\"position:relative\"><span style=\"position:absolute;margin-left:-1.5em;font-weight:300;font-size:1.5rem;color:#9b9b9b\">#</span><h2 id=\"A%20very%20useful%20post%20about%20making%20iPhone%20ringtones\" class=\"jsx-2373991563\"><a href=\"#A%20very%20useful%20post%20about%20making%20iPhone%20ringtones\" class=\"jsx-2373991563\">A very useful post about making iPhone ringtones</a></h2></div><p>Messing around with my Cello I realized I would much rather here this than my ringtone options I had.</p><p>So I recorded the audio on my phone and sent it to myself. This produced an m4a file.</p><p>So how do I get this thing in the right format and looped correctly and on my phone?</p><p>Well FFMPEG can do all of this from the command line.</p><p>So first off, as you are working on your ringtone and want to here what you have, it is easiest to just play it from the command line with:</p><pre><code>    afplay someFile.m4a\n</code></pre><p>So I made a function to get audio from second 2 up to second 4 (seen in the atrim argument below).\nPlay this 50 times (the orignal time + 49 times you see in the aloop argument).\nThen you have to calculate the size of the output. I believe this then is:\n2 seconds of audio <em> 50 times = 100 seconds of audio\n100 seconds of audio </em> 48000 samples per second = 480000 samples ( == 100<!-- -->*<!-- -->48000 you see in the size argument )</p><pre><code>function trimAndLoopRingtone(){\n    # Trim and Loop sound\n    ffmpeg -i $1 -filter_complex &quot; \\\n        [0:a] \\\n            atrim=2:4,asetpts=PTS-STARTPTS, \\\n            asetrate=48000,aloop=49:size=100*48000 \\\n        [outa]&quot; -map &quot;[outa]&quot; -c:a aac &quot;looped$1&quot;\n}\n</code></pre><p>And I ran:</p><pre><code>    trimAndLoopRingtone celloAudio.m4a\n</code></pre><p>to get a file named: <em>loopedcelloAudio.m4a</em></p><p>Then I needed to cut the duration of this down to be below 40 seconds (Apple limits ringtones to 40 seconds):</p><pre><code>function trimDuratonToBelow40() {\n    ffmpeg -i $1 -ss 00:00:00 -to 00:00:38 -c:v copy -c:a copy duration$1\n}\n</code></pre><p>Then I needed to convert this m4a file to an m4r file:</p><pre><code>function convertToRingtoneM4R() {\n    ffmpeg -i $1 -acodec copy -f ipod ringtone.m4r\n}\n</code></pre><p>Now you have you own fancy custom ringtone. But you have to get this onto your phone\nand in a way the you can find the ringtone in your settings (Settings -&gt; Sounds &amp; Haptics ).</p><p>So you can open up Music.app, plug in your phone, open up your phone in the left hand side of Music.app and drag the m4r file in there.\nOr dragging it into the IPhone in Finder might have worked as well. I tried both :)</p>","scope":{"slug":"creating-iphone-ringtones","title":"Creating iPhone Ringtones with a Cello and FFMPEG","date":"2022-03-30","author":"bebrws","tags":["zsh"]}}},"__N_SSG":true}