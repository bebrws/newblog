{"pageProps":{"title":"Learning Neural Networks with Keras/TF and Playing Around with ChatGPT","dateString":"2024-10-04","slug":"keras-and-self-writing-zsh","description":"","tags":["Neural Networks","AI","ChatGPT"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Two Quick Useful Things to Share\"), mdx(\"h2\", null, \"A Hack for Learing Neural Networks With Keras\"), mdx(\"p\", null, \"I am following along and I have found some really \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paulgavrikov/visualkeras\"\n  }, \"great tools\"), \" to help with the learning process.\\nAlong with the IBM Keras Neural Network course I am about to finish\"), mdx(\"p\", null, \"First off I wanted to see the shape of the data at different points in the Sequential model I had created.\\nAnd I realized it's actually really easy to extend Keras Layers and create your. So I made quick debug layer to print out the first input it sees.\\nThis allows me to see the shape of the data as it passes through different layers:\"), mdx(\"p\", null, \"So in my Jupyter notebook, right where I am creating my Keras model I just create my own layer with:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"import functools\\nimport operator\\nimport numpy as np\\nfrom keras.src.engine.base_layer import Layer\\nfrom keras.src.engine.input_spec import InputSpec\\nfrom keras.src.utils import conv_utils\\n# isort: off\\nfrom tensorflow.python.util.tf_export import keras_export\\n# @keras_export(\\\"keras.layers.PrintInputs\\\")\\nclass PrintInputs(Layer):\\n\\n    def __init__(self, data_format=None, **kwargs):\\n        super().__init__(**kwargs)\\n        self.count = 0\\n\\n    def call(self, inputs):\\n        if self.count == 0:\\n            print(inputs)\\n            self.count += 1\\n        return inputs\\n\\n\")), mdx(\"p\", null, \"This is super helpful and I can place it at any point in the model to see what shape is coming in and out of layers. Ex use:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"\\ndef convolutional_model():\\n    \\n    # create model\\n    model = Sequential()\\n    model.add(Conv2D(16, (5, 5), activation='relu', input_shape=(28, 28, 1)))\\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\\n    \\n    model.add(Conv2D(8, (2, 2), activation='relu'))\\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\\n    \\n    \\n    model.add(PrintInputs())  ############### RIGHT HERE \\n    model.add(Flatten())\\n    model.add(PrintInputs())  ############### RIGHT HERE \\n    model.add(Dense(100, activation='relu'))\\n    model.add(Dense(num_classes, activation='softmax'))\\n    \\n    # Compile model\\n    model.compile(optimizer='adam', loss='categorical_crossentropy',  metrics=['accuracy'])\\n    return model\\n\\n\")), mdx(\"p\", null, \"I can see Flatten does indeed make flatten down to a single dimension from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(None, 5, 5, 8)\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(None, 200)\")), mdx(\"h2\", null, \"ChatGPT and ZSH Scripting\"), mdx(\"p\", null, \"Now I have always wasted way too much time scripting away tasks with tools like fzf.. But now I can just ask ChatGPT to do it for me.\\nI just Tell it what function I want to write and it then shows me the function it came up with, and I can choose whether or not I want to have it written to a file that is loaded automatically.\\nIt actually works surprisingly well. It's important that you set the System prompt correctly though. I use a tool sgpt or shell gpt I think just to make it easy. Its a quick python install.\\nI am not going to spend the time to document clearly how to set this up, but you should be able to figure it out from below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ZSH\"\n  }, \"\\n#sgpt role created with:\\n#sgpt --create-role zsh\\n#Enter role description: Response only with a valid zsh function or zsh alias that can be added to a zshrc file to complete my request. Do not surround this script with any markdow\\nn. The response needs to be zsh script I can pipe into zsh itself.\\n#Role \\\"zsh\\\" already exists, overwrite it? [y/N]: y\\n\\n\\n function gptzsh() {\\n   local prompt response confirm\\n   read \\\"prompt?Enter your prompt for ChatGPT: \\\"\\n\\n   # Simulate sending the prompt to ChatGPT and getting a response\\n   response=$(echo \\\"$prompt\\\" | sgpt --no-md --role zsh)\\n\\n   echo \\\"Response: $response\\\"\\n   read \\\"confirm?Do you want to write this response to $HOME/zsh/gpt.zsh? (y/n): \\\"\\n\\n   if [[ \\\"$confirm\\\" == \\\"y\\\" ]]; then\\n     echo \\\"\\\\n\\\\n$response\\\" >> \\\"$HOME/zsh/gpt.zsh\\\"\\n     echo \\\"Response written to $HOME/zsh/gpt.zsh\\\"\\n   else\\n     echo \\\"Response not written to file.\\\"\\n   fi\\n }\\n\\n\")), mdx(\"p\", null, \"Some of this function was even written by ChatGPT.. \"));\n}\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<div style=\"position:relative\"><span style=\"position:absolute;margin-left:-1.5em;font-weight:300;font-size:1.5rem;color:#9b9b9b\">#</span><h1 id=\"Two%20Quick%20Useful%20Things%20to%20Share\" class=\"jsx-2373991563\"><a href=\"#Two%20Quick%20Useful%20Things%20to%20Share\" class=\"jsx-2373991563\">Two Quick Useful Things to Share</a></h1></div><div style=\"position:relative\"><span style=\"position:absolute;margin-left:-1.5em;font-weight:300;font-size:1.5rem;color:#9b9b9b\">#</span><h2 id=\"A%20Hack%20for%20Learing%20Neural%20Networks%20With%20Keras\" class=\"jsx-2373991563\"><a href=\"#A%20Hack%20for%20Learing%20Neural%20Networks%20With%20Keras\" class=\"jsx-2373991563\">A Hack for Learing Neural Networks With Keras</a></h2></div><p>I am following along and I have found some really <a href=\"https://github.com/paulgavrikov/visualkeras\">great tools</a> to help with the learning process.\nAlong with the IBM Keras Neural Network course I am about to finish</p><p>First off I wanted to see the shape of the data at different points in the Sequential model I had created.\nAnd I realized it&#x27;s actually really easy to extend Keras Layers and create your. So I made quick debug layer to print out the first input it sees.\nThis allows me to see the shape of the data as it passes through different layers:</p><p>So in my Jupyter notebook, right where I am creating my Keras model I just create my own layer with:</p><pre><code class=\"language-python\">import functools\nimport operator\nimport numpy as np\nfrom keras.src.engine.base_layer import Layer\nfrom keras.src.engine.input_spec import InputSpec\nfrom keras.src.utils import conv_utils\n# isort: off\nfrom tensorflow.python.util.tf_export import keras_export\n# @keras_export(&quot;keras.layers.PrintInputs&quot;)\nclass PrintInputs(Layer):\n\n    def __init__(self, data_format=None, **kwargs):\n        super().__init__(**kwargs)\n        self.count = 0\n\n    def call(self, inputs):\n        if self.count == 0:\n            print(inputs)\n            self.count += 1\n        return inputs\n\n</code></pre><p>This is super helpful and I can place it at any point in the model to see what shape is coming in and out of layers. Ex use:</p><pre><code class=\"language-python\">\ndef convolutional_model():\n    \n    # create model\n    model = Sequential()\n    model.add(Conv2D(16, (5, 5), activation=&#x27;relu&#x27;, input_shape=(28, 28, 1)))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n    \n    model.add(Conv2D(8, (2, 2), activation=&#x27;relu&#x27;))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n    \n    \n    model.add(PrintInputs())  ############### RIGHT HERE \n    model.add(Flatten())\n    model.add(PrintInputs())  ############### RIGHT HERE \n    model.add(Dense(100, activation=&#x27;relu&#x27;))\n    model.add(Dense(num_classes, activation=&#x27;softmax&#x27;))\n    \n    # Compile model\n    model.compile(optimizer=&#x27;adam&#x27;, loss=&#x27;categorical_crossentropy&#x27;,  metrics=[&#x27;accuracy&#x27;])\n    return model\n\n</code></pre><p>I can see Flatten does indeed make flatten down to a single dimension from <code>(None, 5, 5, 8)</code> to <code>(None, 200)</code></p><div style=\"position:relative\"><span style=\"position:absolute;margin-left:-1.5em;font-weight:300;font-size:1.5rem;color:#9b9b9b\">#</span><h2 id=\"ChatGPT%20and%20ZSH%20Scripting\" class=\"jsx-2373991563\"><a href=\"#ChatGPT%20and%20ZSH%20Scripting\" class=\"jsx-2373991563\">ChatGPT and ZSH Scripting</a></h2></div><p>Now I have always wasted way too much time scripting away tasks with tools like fzf.. But now I can just ask ChatGPT to do it for me.\nI just Tell it what function I want to write and it then shows me the function it came up with, and I can choose whether or not I want to have it written to a file that is loaded automatically.\nIt actually works surprisingly well. It&#x27;s important that you set the System prompt correctly though. I use a tool sgpt or shell gpt I think just to make it easy. Its a quick python install.\nI am not going to spend the time to document clearly how to set this up, but you should be able to figure it out from below:</p><pre><code class=\"language-ZSH\">\n#sgpt role created with:\n#sgpt --create-role zsh\n#Enter role description: Response only with a valid zsh function or zsh alias that can be added to a zshrc file to complete my request. Do not surround this script with any markdow\nn. The response needs to be zsh script I can pipe into zsh itself.\n#Role &quot;zsh&quot; already exists, overwrite it? [y/N]: y\n\n\n function gptzsh() {\n   local prompt response confirm\n   read &quot;prompt?Enter your prompt for ChatGPT: &quot;\n\n   # Simulate sending the prompt to ChatGPT and getting a response\n   response=$(echo &quot;$prompt&quot; | sgpt --no-md --role zsh)\n\n   echo &quot;Response: $response&quot;\n   read &quot;confirm?Do you want to write this response to $HOME/zsh/gpt.zsh? (y/n): &quot;\n\n   if [[ &quot;$confirm&quot; == &quot;y&quot; ]]; then\n     echo &quot;\\n\\n$response&quot; &gt;&gt; &quot;$HOME/zsh/gpt.zsh&quot;\n     echo &quot;Response written to $HOME/zsh/gpt.zsh&quot;\n   else\n     echo &quot;Response not written to file.&quot;\n   fi\n }\n\n</code></pre><p>Some of this function was even written by ChatGPT.. </p>","scope":{"slug":"keras-and-self-writing-zsh","title":"Learning Neural Networks with Keras/TF and Playing Around with ChatGPT","date":"2024-10-04","author":"bebrws","tags":["Neural Networks","AI","ChatGPT"]}}},"__N_SSG":true}