{"pageProps":{"title":"FZNim - My fzf like library and clone writtin in Nim","dateString":"2020-08-30","slug":"fznim","description":"","tags":["alacritty"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Introducing FZNim\"), mdx(\"p\", null, \"I love fzf\"), mdx(\"p\", null, \"It has become, by far, the most useful \\\"new\\\" command line tool I have. It can be a godsend when it comes to searching through.. anything. A good example is files and directories.\"), mdx(\"p\", null, \"I always setup a folder named \\\"repos\\\" on my laptop where I store all my code repositories. Because of this I am constantly cd ing into this folder then cd ing into a specific repo folder to start work on a project.\"), mdx(\"p\", null, \"Sometimes I cant rememeber the exact name of a repo or am just feeling lazy and now can save time and mental energy with a quick:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\nfunction cdr() {\\n    cd ~/repos/$(ls ~/repos | fzf)\\n}\\n\\ncdr\\n\")), mdx(\"p\", null, \"With this command I can roughly type the repo I am looking for and jump into my project from anywhere on my laptop. I like this tool so much I thought there would be some use cases that weren't easy to script with fzf.\"), mdx(\"p\", null, \"Maybe you have some more complicated input and output requirements than what can be done with a bash or zsh array of string.\"), mdx(\"p\", null, \"Here is my \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/bebrws/fznim\"\n  }, \"Nim clone of fzf, named FZNim\"), \" (which can be used as a Nim and therefore C and Objective-C library):\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/fznim.gif\",\n    \"alt\": \"An animated gif of the fzf like usage of fznim\"\n  })), mdx(\"p\", null, \"I am working on some more useful fzf like ideas right now an hopefully will have something to show for it soon.\"), mdx(\"h2\", null, \"FZNim code\"), mdx(\"h3\", null, \"Interesting Issues\"), mdx(\"p\", null, \"I ran into a few interesting issues. Like problems \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/post/GettingSTDINAfterPipe\"\n  }, \"getting keyboard input after piping in input into STDIN\"), \" or needing to write \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/post/nimFuzzySearch\"\n  }, \"my own fuzzy string search in nim\"), \".\"), mdx(\"h3\", null, \"Terminal Colors\"), mdx(\"p\", null, \"Coloring the terminal output actually ended up being pretty easy.\"), mdx(\"p\", null, \"To get the escape code right I needed to use: \\\"\\\\e[1;\\\" instead of \\\"\\\\033[0;\\\"\"), mdx(\"p\", null, \"To print out a string hello in blue in nim you could use:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"echo \\\"\\\\e[1;34mhello\\\\e[00m\\\"\\n\")), mdx(\"h3\", null, \"NCurses or not\"), mdx(\"p\", null, \"I thought about using ncurses here but saw there is a nice terminal import in the Nim standard library\"), mdx(\"p\", null, \"With this I could set cursor position (setCursorPos) and clear the screen (eraseScreen). This was really all I needed.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h2>Introducing FZNim</h2><p>I love fzf</p><p>It has become, by far, the most useful &quot;new&quot; command line tool I have. It can be a godsend when it comes to searching through.. anything. A good example is files and directories.</p><p>I always setup a folder named &quot;repos&quot; on my laptop where I store all my code repositories. Because of this I am constantly cd ing into this folder then cd ing into a specific repo folder to start work on a project.</p><p>Sometimes I cant rememeber the exact name of a repo or am just feeling lazy and now can save time and mental energy with a quick:</p><pre><code>\nfunction cdr() {\n    cd ~/repos/$(ls ~/repos | fzf)\n}\n\ncdr\n</code></pre><p>With this command I can roughly type the repo I am looking for and jump into my project from anywhere on my laptop. I like this tool so much I thought there would be some use cases that weren&#x27;t easy to script with fzf.</p><p>Maybe you have some more complicated input and output requirements than what can be done with a bash or zsh array of string.</p><p>Here is my <a href=\"https://github.com/bebrws/fznim\">Nim clone of fzf, named FZNim</a> (which can be used as a Nim and therefore C and Objective-C library):</p><p><img src=\"/static/fznim.gif\" alt=\"An animated gif of the fzf like usage of fznim\"/></p><p>I am working on some more useful fzf like ideas right now an hopefully will have something to show for it soon.</p><h2>FZNim code</h2><h3>Interesting Issues</h3><p>I ran into a few interesting issues. Like problems <a href=\"/post/GettingSTDINAfterPipe\">getting keyboard input after piping in input into STDIN</a> or needing to write <a href=\"/post/nimFuzzySearch\">my own fuzzy string search in nim</a>.</p><h3>Terminal Colors</h3><p>Coloring the terminal output actually ended up being pretty easy.</p><p>To get the escape code right I needed to use: &quot;\\e[1;&quot; instead of &quot;\\033[0;&quot;</p><p>To print out a string hello in blue in nim you could use:</p><pre><code>echo &quot;\\e[1;34mhello\\e[00m&quot;\n</code></pre><h3>NCurses or not</h3><p>I thought about using ncurses here but saw there is a nice terminal import in the Nim standard library</p><p>With this I could set cursor position (setCursorPos) and clear the screen (eraseScreen). This was really all I needed.</p>","scope":{"slug":"fznim","title":"FZNim - My fzf like library and clone writtin in Nim","date":"2020-08-30","author":"bebrws","tags":["alacritty"]}}},"__N_SSG":true}