{"pageProps":{"title":"Wireguard","dateString":"2019-12-14","slug":"wireguard","description":"","tags":["linux","wireguard"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"How to setup a Wireguard VPN for free!\"), mdx(\"p\", null, \"Go grab a free account if you haven't already signed for one from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://azure.microsoft.com/en-us/free/search/?&ef_id=EAIaIQobChMIs6y5wYe25gIVFtRkCh3jJANyEAAYASABEgK6pvD_BwE:G:s&OCID=AID2000128_SEM_hDTj6HPx&MarinID=hDTj6HPx_287547081826_azure%20free%20account_e_c_TAwBQrMX_44568976297_kwd-300666823650&lnkd=Google_Azure_Brand&gclid=EAIaIQobChMIs6y5wYe25gIVFtRkCh3jJANyEAAYASABEgK6pvD_BwE\"\n  }, \"Azure\"), \" or you could use your AWS free compute hours with a small EC2 instance.\"), mdx(\"p\", null, \"Create a the small VM that fits in the free price range\"), mdx(\"p\", null, \"Set the networking rules to allow ANY traffic TCP/UDP over port 51820 (Wireguard really only used UDP though I am pretty sure).\\nIn azure you would do this by creating the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft.freeaccountvirtualmachine?tab=Overview\"\n  }, \"Free VM\"), \" (which can be created with a few clicks from that link after creating your account). Then once the VM is created and ready you and you have a status of \\\"Your deployment is complete\\\" you can open the \\\"Deployment details\\\" section and click on the Resource link of Type \\\"Microsoft.Compute/virtumachines\\\".\"), mdx(\"p\", null, \"In the left sidebar there will be a link for Networking. Click this.\"), mdx(\"p\", null, \"On the networking page click \\\"Add Inbound port rule\\\".\"), mdx(\"p\", null, \"Create a rule with the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"   Source: Any\\n   Source port range: *\\n   Destination: Any\\n   Desitnation port range: 51820\\n   Protocal: Any\\n   Action: Allow\\n   PriorityL 380\\n   Name: Port_51820\\n   Description: Wireguard\\n\")), mdx(\"p\", null, \"SSH into your VM.\"), mdx(\"p\", null, \"Run the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# Generate public and private keys\\n\\numask 077\\nwg genkey | tee privatekey | wg pubkey > publickey\\n\\n# Run these as root\\n\\nsudo su\\n\\ncat << EOF >> /etc/sysctl.conf\\nnet.ipv4.ip_forward=1\\nnet.ipv6.conf.all.forwarding=1\\nEOF\\n\\nadd-apt-repository ppa:wireguard/wireguard\\napt-get update\\napt-get install wireguard\\n\\necho \\\"This is the Server Private Key:\\\"\\ncat privatekey\\n\\necho \\\"This is the Server Public Key:\\\"\\ncat publickey\\n\\necho \\\"This will be the Client Private Key if you need to generate one (using the OSX Wireguardd App?):\\\"\\nwg genkey | sudo tee clientprivatekey\\ncat clientprivatekey\\n\")), mdx(\"p\", null, \"Now if you are using the OSX Wireguard App you will create a new \\\"empty tunnnel\\\" by clicking the bottom left plus button. Paste in the following replacing IPAddressOfYourServer with your VM IP and then replace ClientPrivateKey with the value from the clientprivatekey file. ServerPublicKey will be replaced with the Server Public Key:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"[Interface]\\nPrivateKey = ClientPrivateKey\\nListenPort = 21841\\nAddress = 192.168.2.2/32\\nDNS = 1.1.1.1\\n\\n[Peer]\\nPublicKey = ServerPublicKey\\nAllowedIPs = 0.0.0.0/0, ::/0\\nEndpoint = IPAddressOfYourServer:51820\\nPersistentKeepalive = 25\\n\")), mdx(\"p\", null, \"After replacing the values I mentioned and copying this into the Wireguard OSX App you will have a Client Public Key generated. It will be right above the text box you paste the configuration into. Take this value and replace PublicKeyFromClient> with it. Replace <PrivateKeyfromthe2ndComnmandAbove with the Server Private Key that was printed out in the last set of commands you ran on the VM. The run the following on your VM:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"cat << EOF >> /etc/wireguard/wg0.conf\\n[Interface]\\nAddress = 192.168.2.1\\nPostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\\nPostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\\nListenPort = 51820\\nPrivateKey = PrivateKeyfromthe2ndComnmandAbove\\nDNS = 1.1.1.1\\n\\n\\n[Peer]\\nPublicKey = PublicKeyFromClient\\nAllowedIPs = 192.168.2.2/32\\nEOF\\n\\n\")), mdx(\"p\", null, \"You may also want to setup a firewall on your VM by running:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"sudo ufw allow 22/tcp\\nsudo ufw allow 51820/udp\\nsudo ufw enable\\n\")), mdx(\"p\", null, \"This is optional.\"), mdx(\"p\", null, \"It is time to start the Wiregaurd server.\\nRun this on your VM:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"sudo wg-quick up wg0\\nsudo systemctl enable wg-quick@wg0 # Set wireguard to run on system start\\nsudo wg show # Check the status\\n\")), mdx(\"p\", null, \"Note: after every change to your /etc/wiregaurd/wg0.conf file you will need to bring the wiregaurd service down and back up again:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"sudo wg-quick down wg0\\nsudo wg-quick up wg0\\n\")), mdx(\"p\", null, \"You should now be able to go back to you Wireguard client and activate the connection. Google \\\"What Is My IP\\\" and verify that your IP has changed. You could then also try checking if you have DNS Leaks. Note that I am using Cloudflare DNS. I believe for a really secure VPN you would want to install DNS on your VPN as well but I have not bothered to attempt that yet.\"), mdx(\"p\", null, \"Other resources:\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://securityespresso.org/tutorials/2019/03/22/vpn-server-using-wireguard-on-ubuntu/\"\n  }, \"Another Ubuntu based tutorial\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.linode.com/docs/networking/vpn/set-up-wireguard-vpn-on-ubuntu/\"\n  }, \"Linode's tutorial which I had trouble with\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>How to setup a Wireguard VPN for free!</p><p>Go grab a free account if you haven&#x27;t already signed for one from <a href=\"https://azure.microsoft.com/en-us/free/search/?&amp;ef_id=EAIaIQobChMIs6y5wYe25gIVFtRkCh3jJANyEAAYASABEgK6pvD_BwE:G:s&amp;OCID=AID2000128_SEM_hDTj6HPx&amp;MarinID=hDTj6HPx_287547081826_azure%20free%20account_e_c_TAwBQrMX_44568976297_kwd-300666823650&amp;lnkd=Google_Azure_Brand&amp;gclid=EAIaIQobChMIs6y5wYe25gIVFtRkCh3jJANyEAAYASABEgK6pvD_BwE\">Azure</a> or you could use your AWS free compute hours with a small EC2 instance.</p><p>Create a the small VM that fits in the free price range</p><p>Set the networking rules to allow ANY traffic TCP/UDP over port 51820 (Wireguard really only used UDP though I am pretty sure).\nIn azure you would do this by creating the <a href=\"https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft.freeaccountvirtualmachine?tab=Overview\">Free VM</a> (which can be created with a few clicks from that link after creating your account). Then once the VM is created and ready you and you have a status of &quot;Your deployment is complete&quot; you can open the &quot;Deployment details&quot; section and click on the Resource link of Type &quot;Microsoft.Compute/virtumachines&quot;.</p><p>In the left sidebar there will be a link for Networking. Click this.</p><p>On the networking page click &quot;Add Inbound port rule&quot;.</p><p>Create a rule with the following:</p><pre><code>   Source: Any\n   Source port range: *\n   Destination: Any\n   Desitnation port range: 51820\n   Protocal: Any\n   Action: Allow\n   PriorityL 380\n   Name: Port_51820\n   Description: Wireguard\n</code></pre><p>SSH into your VM.</p><p>Run the following:</p><pre><code># Generate public and private keys\n\numask 077\nwg genkey | tee privatekey | wg pubkey &gt; publickey\n\n# Run these as root\n\nsudo su\n\ncat &lt;&lt; EOF &gt;&gt; /etc/sysctl.conf\nnet.ipv4.ip_forward=1\nnet.ipv6.conf.all.forwarding=1\nEOF\n\nadd-apt-repository ppa:wireguard/wireguard\napt-get update\napt-get install wireguard\n\necho &quot;This is the Server Private Key:&quot;\ncat privatekey\n\necho &quot;This is the Server Public Key:&quot;\ncat publickey\n\necho &quot;This will be the Client Private Key if you need to generate one (using the OSX Wireguardd App?):&quot;\nwg genkey | sudo tee clientprivatekey\ncat clientprivatekey\n</code></pre><p>Now if you are using the OSX Wireguard App you will create a new &quot;empty tunnnel&quot; by clicking the bottom left plus button. Paste in the following replacing IPAddressOfYourServer with your VM IP and then replace ClientPrivateKey with the value from the clientprivatekey file. ServerPublicKey will be replaced with the Server Public Key:</p><pre><code>[Interface]\nPrivateKey = ClientPrivateKey\nListenPort = 21841\nAddress = 192.168.2.2/32\nDNS = 1.1.1.1\n\n[Peer]\nPublicKey = ServerPublicKey\nAllowedIPs = 0.0.0.0/0, ::/0\nEndpoint = IPAddressOfYourServer:51820\nPersistentKeepalive = 25\n</code></pre><p>After replacing the values I mentioned and copying this into the Wireguard OSX App you will have a Client Public Key generated. It will be right above the text box you paste the configuration into. Take this value and replace PublicKeyFromClient&gt; with it. Replace &lt;PrivateKeyfromthe2ndComnmandAbove with the Server Private Key that was printed out in the last set of commands you ran on the VM. The run the following on your VM:</p><pre><code>cat &lt;&lt; EOF &gt;&gt; /etc/wireguard/wg0.conf\n[Interface]\nAddress = 192.168.2.1\nPostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\nListenPort = 51820\nPrivateKey = PrivateKeyfromthe2ndComnmandAbove\nDNS = 1.1.1.1\n\n\n[Peer]\nPublicKey = PublicKeyFromClient\nAllowedIPs = 192.168.2.2/32\nEOF\n\n</code></pre><p>You may also want to setup a firewall on your VM by running:</p><pre><code>sudo ufw allow 22/tcp\nsudo ufw allow 51820/udp\nsudo ufw enable\n</code></pre><p>This is optional.</p><p>It is time to start the Wiregaurd server.\nRun this on your VM:</p><pre><code>sudo wg-quick up wg0\nsudo systemctl enable wg-quick@wg0 # Set wireguard to run on system start\nsudo wg show # Check the status\n</code></pre><p>Note: after every change to your /etc/wiregaurd/wg0.conf file you will need to bring the wiregaurd service down and back up again:</p><pre><code>sudo wg-quick down wg0\nsudo wg-quick up wg0\n</code></pre><p>You should now be able to go back to you Wireguard client and activate the connection. Google &quot;What Is My IP&quot; and verify that your IP has changed. You could then also try checking if you have DNS Leaks. Note that I am using Cloudflare DNS. I believe for a really secure VPN you would want to install DNS on your VPN as well but I have not bothered to attempt that yet.</p><p>Other resources:</p><p><a href=\"https://securityespresso.org/tutorials/2019/03/22/vpn-server-using-wireguard-on-ubuntu/\">Another Ubuntu based tutorial</a></p><p><a href=\"https://www.linode.com/docs/networking/vpn/set-up-wireguard-vpn-on-ubuntu/\">Linode&#x27;s tutorial which I had trouble with</a></p>","scope":{"slug":"wireguard","title":"Wireguard","date":"2019-12-14","author":"bebrws","tags":["linux","wireguard"]}}},"__N_SSG":true}