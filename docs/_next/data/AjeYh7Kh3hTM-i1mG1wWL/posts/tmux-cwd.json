{"pageProps":{"title":"Using tmux to change directory with a mouse click","dateString":"2020-12-15","slug":"tmux-cwd","description":"","tags":["cello"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/tmuxcd.gif\",\n    \"alt\": \"tmux cwd change by mouse click\"\n  })), mdx(\"h1\", null, \"tmux config\"), mdx(\"p\", null, \"First off you are going to need to add the following to your tmux config ~/.tmux.conf:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"bind -n DoubleClick1Pane {\\n   setw -g word-separators ' @\\\"=()[]:'\\n   run-shell -t 0 \\\"tmha #{mouse_word}\\\"\\n}\\n\\nbind -n C-DoubleClick1Pane {\\n   setw -g word-separators ' @\\\"=()[]:'\\n   run-shell -t 0 \\\"tmhac #{mouse_word}\\\"\\n}\\n\\n# Make it so when you Option Double Click on a word it is copied to the clip board - easier than selecting it usually\\nbind -n M-DoubleClick1Pane {\\n   setw -g word-separators ' @\\\"=()[]:'\\nrun-shell -t 0 \\\"echo \\\\\\\"#{mouse_word}\\\\\\\" | pbcopy\\\"\\n}\\n\\n\\n\")), mdx(\"p\", null, \"Make sure mouse mode is on:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"set -g mouse on\\n\")), mdx(\"h3\", null, \"NOTE - I am using the latest build of tmux although this should only be necessary for the popup windows\"), mdx(\"h1\", null, \"Create some shell scripts\"), mdx(\"p\", null, \"I put the scripts in /usr/local/bin\"), mdx(\"p\", null, \"/usr/local/bin/tmha\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"#!/usr/bin/env zsh\\n\\n# tmux display-message \\\"Clicked on: $1\\\"\\n\\n# alias l='exa -a -a -l'\\n# alias lx='exa -a -a -x'\\n\\nif [[ \\\"$1\\\" == \\\"package.json\\\" ]]; then\\n    tmux send-keys -t \\\"$pane\\\" C-z \\\"cat package.json | jq -r '.scripts'\\\" Enter\\n    tmux send-keys -t \\\"$pane\\\" C-z 'npm run-script $(cat package.json | jq -r \\\".scripts | keys[]\\\" | fzf)' Enter\\nelif [[ \\\"$1\\\" == \\\"/Users/\\\"* ]]; then\\n    tmux send-keys -t \\\"$pane\\\" C-z \\\"lx\\\" Enter\\n    tmux send-keys -t \\\"$pane\\\" C-z \\\"code $1\\\" Enter\\nelse\\n    tmux send-keys -t \\\"$pane\\\" C-z \\\"if [ -d \\\"$1\\\" ]; then cd $1 && lx; else code $1; fi\\\" Enter\\nfi\\n\")), mdx(\"p\", null, \"/usr/local/bin/tmhac\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"#!/usr/bin/env zsh\\n\\n# alias l='exa -a -a -l'\\n# alias lx='exa -a -a -x'\\n\\ntmux send-keys -t \\\"$pane\\\" C-z \\\"code $1\\\" Enter\\n\")), mdx(\"p\", null, \"Now whenever you double click on a file it will either try to run npm run-scripts if it is package.json, if it is a specific path then just open VSCode editor to that path, or if it is a direcory then cd to that directory and list all files.\"), mdx(\"p\", null, \"Note that Control clicking will lead to VSCode always being ran on the file clicked.\"), mdx(\"h2\", null, \"If you like this..\"), mdx(\"p\", null, \"Then checkout my \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/bebrws/alacritty-tabs/releases\"\n  }, \"Alacritty Github Fork Releases\"), \". I have a build of Alacritty that, when Command Click occurs, the word clicked is echoed into the terminal.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><img src=\"/static/tmuxcd.gif\" alt=\"tmux cwd change by mouse click\"/></p><h1>tmux config</h1><p>First off you are going to need to add the following to your tmux config ~/.tmux.conf:</p><pre><code>bind -n DoubleClick1Pane {\n   setw -g word-separators &#x27; @&quot;=()[]:&#x27;\n   run-shell -t 0 &quot;tmha #{mouse_word}&quot;\n}\n\nbind -n C-DoubleClick1Pane {\n   setw -g word-separators &#x27; @&quot;=()[]:&#x27;\n   run-shell -t 0 &quot;tmhac #{mouse_word}&quot;\n}\n\n# Make it so when you Option Double Click on a word it is copied to the clip board - easier than selecting it usually\nbind -n M-DoubleClick1Pane {\n   setw -g word-separators &#x27; @&quot;=()[]:&#x27;\nrun-shell -t 0 &quot;echo \\&quot;#{mouse_word}\\&quot; | pbcopy&quot;\n}\n\n\n</code></pre><p>Make sure mouse mode is on:</p><pre><code>set -g mouse on\n</code></pre><h3>NOTE - I am using the latest build of tmux although this should only be necessary for the popup windows</h3><h1>Create some shell scripts</h1><p>I put the scripts in /usr/local/bin</p><p>/usr/local/bin/tmha</p><pre><code>#!/usr/bin/env zsh\n\n# tmux display-message &quot;Clicked on: $1&quot;\n\n# alias l=&#x27;exa -a -a -l&#x27;\n# alias lx=&#x27;exa -a -a -x&#x27;\n\nif [[ &quot;$1&quot; == &quot;package.json&quot; ]]; then\n    tmux send-keys -t &quot;$pane&quot; C-z &quot;cat package.json | jq -r &#x27;.scripts&#x27;&quot; Enter\n    tmux send-keys -t &quot;$pane&quot; C-z &#x27;npm run-script $(cat package.json | jq -r &quot;.scripts | keys[]&quot; | fzf)&#x27; Enter\nelif [[ &quot;$1&quot; == &quot;/Users/&quot;* ]]; then\n    tmux send-keys -t &quot;$pane&quot; C-z &quot;lx&quot; Enter\n    tmux send-keys -t &quot;$pane&quot; C-z &quot;code $1&quot; Enter\nelse\n    tmux send-keys -t &quot;$pane&quot; C-z &quot;if [ -d &quot;$1&quot; ]; then cd $1 &amp;&amp; lx; else code $1; fi&quot; Enter\nfi\n</code></pre><p>/usr/local/bin/tmhac</p><pre><code>#!/usr/bin/env zsh\n\n# alias l=&#x27;exa -a -a -l&#x27;\n# alias lx=&#x27;exa -a -a -x&#x27;\n\ntmux send-keys -t &quot;$pane&quot; C-z &quot;code $1&quot; Enter\n</code></pre><p>Now whenever you double click on a file it will either try to run npm run-scripts if it is package.json, if it is a specific path then just open VSCode editor to that path, or if it is a direcory then cd to that directory and list all files.</p><p>Note that Control clicking will lead to VSCode always being ran on the file clicked.</p><h2>If you like this..</h2><p>Then checkout my <a href=\"https://github.com/bebrws/alacritty-tabs/releases\">Alacritty Github Fork Releases</a>. I have a build of Alacritty that, when Command Click occurs, the word clicked is echoed into the terminal.</p>","scope":{"slug":"tmux-cwd","title":"Using tmux to change directory with a mouse click","date":"2020-12-15","author":"bebrws","tags":["cello"]}}},"__N_SSG":true}