{"pageProps":{"title":"Writing Nim Command Line Utilities","dateString":"2020-01-20","slug":"nim-cli-tools","description":"","tags":["zsh"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Nim is an incredible language. It has an amazing type and macro system but I am not knowledgable enough to really go into how great this all is.\"), mdx(\"p\", null, \"One great use for Nim that I have found though is writing command line utilities.\"), mdx(\"p\", null, \"When scripting something maybe too slow to write or run then writing it in Nim might be a good option.\"), mdx(\"p\", null, \"To get started this is a short little example script which will read lines from stdin until EOF.\"), mdx(\"p\", null, \"For each line read it will check if the line ends with a string which was passed as the first command line option.\"), mdx(\"p\", null, \"If it does that line is echoed out to STDOUT. Basically a simple grep subset example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import strformat\\nimport strutils\\nimport os\\n\\nproc rl(): tuple[line: string, eof: bool]   =\\n  result.eof = false\\n  result.line = \\\"\\\"\\n  var l:string\\n  try:\\n    if not stdin.readLine(l):\\n        result.eof = true\\n    else:\\n        result.line = l\\n  except EOFError:\\n    result.eof = true\\n\\nif paramCount() != 1:\\n    echo fmt\\\"Usage: {paramStr(0)} string-to-check-if-stdin-lines-endswith\\\"\\n    quit(1)\\n\\nwhile true:\\n  var (l, eof) = rl()\\n  if eof:\\n      break\\n  if l.endsWith paramStr(1):\\n    echo l\\n\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Nim is an incredible language. It has an amazing type and macro system but I am not knowledgable enough to really go into how great this all is.</p><p>One great use for Nim that I have found though is writing command line utilities.</p><p>When scripting something maybe too slow to write or run then writing it in Nim might be a good option.</p><p>To get started this is a short little example script which will read lines from stdin until EOF.</p><p>For each line read it will check if the line ends with a string which was passed as the first command line option.</p><p>If it does that line is echoed out to STDOUT. Basically a simple grep subset example</p><pre><code>import strformat\nimport strutils\nimport os\n\nproc rl(): tuple[line: string, eof: bool]   =\n  result.eof = false\n  result.line = &quot;&quot;\n  var l:string\n  try:\n    if not stdin.readLine(l):\n        result.eof = true\n    else:\n        result.line = l\n  except EOFError:\n    result.eof = true\n\nif paramCount() != 1:\n    echo fmt&quot;Usage: {paramStr(0)} string-to-check-if-stdin-lines-endswith&quot;\n    quit(1)\n\nwhile true:\n  var (l, eof) = rl()\n  if eof:\n      break\n  if l.endsWith paramStr(1):\n    echo l\n\n</code></pre>","scope":{"slug":"nim-cli-tools","title":"Writing Nim Command Line Utilities","date":"2020-01-20","author":"bebrws","tags":["zsh"]}}},"__N_SSG":true}