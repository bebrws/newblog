{"pageProps":{"title":"Using CSS Clip Path or SVGs","dateString":"2021-08-22","slug":"clip-path-vs-svg","description":"","tags":["React","CSS","SVG"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Creating a scalable SVG or Clip Path element\"), mdx(\"p\", null, \"The other day I was working on creating a tag element. I was informed about CSS clip-path which I had not heard of before.\"), mdx(\"p\", null, \"This is a pretty great solution. But I don't know much CSS and also don't know much about passing in variables easily other than by using a style tag or something similar.\"), mdx(\"p\", null, \"The correct clip-path solution would probably be like the SVG solution I came up with.\"), mdx(\"p\", null, \"However I opted for the SVG alternative.\"), mdx(\"p\", null, \"One negative with SVGs is that the text element styling appears to be slightly different than regular text styling in HTML.\"), mdx(\"p\", null, \"For example sizing is slightly larger in SVGs possibly?\"), mdx(\"h3\", null, \"Clip Path code:\"), mdx(\"p\", null, \"First I created a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codepen.io/bebrws/pen/LYLPBRJ\"\n  }, \"clip-path version of the tag\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"../static/clip-path-tag.jpg\",\n    \"alt\": \"\\\"CSS Clip Path Tag\\\"\"\n  })), mdx(\"h4\", null, \"CSS\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \".tagBackground {\\n    width: 450px;\\n    height: 200px;\\n  color: yellow;\\n  background-color: brown;\\n  clip-path: polygon(0 33%, 0 66%, 16% 100%, 100% 100%, 100% 0, 16% 0);\\n  position: relative;\\n}\\n\\n.tag-circle {\\n  clip-path: circle(25%);\\n  background-color: white;\\n  width: 60px;\\n  height: 60px;\\n  position: absolute;\\n  top: 33%;\\n  left: 4%;\\n}\\n\\nspan {\\n    color: yellow;\\n    font-size: 4rem;\\n    position: absolute;\\n    top: 28%;\\n    left: 32%;\\n}\\n\")), mdx(\"h4\", null, \"HTML\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"<div class='tagBackground'>\\n  <span>30% OFF</span>\\n  <div class=\\\"tag-circle\\\">\\n  </div>\\n</div>\\n\")), mdx(\"h3\", null, \"SVG React code:\"), mdx(\"p\", null, \"Then I created \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codepen.io/bebrws/pen/QWgLZqX\"\n  }, \"the SVG React component which scales\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"../static/react-svg-tag.jpg\",\n    \"alt\": \"\\\"React SVG Scalable Tag\\\"\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import React, { Component } from \\\"https://cdn.skypack.dev/react@17.0.1\\\";\\nimport { render } from \\\"https://cdn.skypack.dev/react-dom@17.0.1\\\";\\n\\n\\nfunction App({width}) {\\n    const height = width/3;\\n\\n    const middle = height / 2;\\n    const topMiddle = middle - (middle*.20);\\n    const bottomMiddle = middle + (middle*.20);\\n\\n    const sideCut = width *.075;\\n\\n    const d = `0,${topMiddle},0,${bottomMiddle},${sideCut},${height},${width},${height},${width},0,${sideCut},0\\u2019`;\\n    const ppath = `M${d}Z`;\\n\\n    return (\\n      <>\\n        <br />\\n        <svg\\n          width={`${width}px`}\\n          height={`${height}px`}\\n          viewBox={`0 0 ${width} ${height}`}\\n        >\\n          <rect width={`${width}`} height={`${height}`} fill=\\\"#efefef\\\" />\\n          <path\\n            d={ppath}\\n            fill=\\\"brown\\\"\\n          />\\n          <circle fill=\\\"white\\\" cx={`${width * .1}`} cy={`${middle}`} r={`${width * .03}`} />\\n          <text font-size={\\\"2rem\\\"} x={`${width* .25}`} y={`${middle + middle * .125}`} fill=\\\"white\\\">30% OFF</text>\\n        </svg>\\n      </>\\n    );\\n}\\n\\nrender(<App width={400} />, document.getElementById('root'));\\n\")), mdx(\"h4\", null, \"HTML:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"<div id=\\\"root\\\"></div>\\n\")), mdx(\"h3\", null, \"The real SVG component would take props for the fill colors so that this can be used on any background. For example the white abd brown would be props.\"));\n}\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<div style=\"position:relative\"><span style=\"position:absolute;margin-left:-1.5em;font-weight:300;font-size:1.5rem;color:#9b9b9b\">#</span><h2 id=\"Creating%20a%20scalable%20SVG%20or%20Clip%20Path%20element\" class=\"jsx-2373991563\"><a href=\"#Creating%20a%20scalable%20SVG%20or%20Clip%20Path%20element\" class=\"jsx-2373991563\">Creating a scalable SVG or Clip Path element</a></h2></div><p>The other day I was working on creating a tag element. I was informed about CSS clip-path which I had not heard of before.</p><p>This is a pretty great solution. But I don&#x27;t know much CSS and also don&#x27;t know much about passing in variables easily other than by using a style tag or something similar.</p><p>The correct clip-path solution would probably be like the SVG solution I came up with.</p><p>However I opted for the SVG alternative.</p><p>One negative with SVGs is that the text element styling appears to be slightly different than regular text styling in HTML.</p><p>For example sizing is slightly larger in SVGs possibly?</p><div style=\"position:relative\"><span style=\"position:absolute;margin-left:-1.5em;font-weight:300;font-size:1.5rem;color:#9b9b9b\">#</span><h3 id=\"Clip%20Path%20code%3a\" class=\"jsx-2373991563\"><a href=\"#Clip%20Path%20code%3a\" class=\"jsx-2373991563\">Clip Path code:</a></h3></div><p>First I created a <a href=\"https://codepen.io/bebrws/pen/LYLPBRJ\">clip-path version of the tag</a></p><p><img src=\"../static/clip-path-tag.jpg\" alt=\"&quot;CSS Clip Path Tag&quot;\"/></p><div style=\"position:relative\"><span style=\"position:absolute;margin-left:-1.5em;font-weight:300;font-size:1.5rem;color:#9b9b9b\">#</span><h4 id=\"CSS\" class=\"jsx-2373991563\"><a href=\"#CSS\" class=\"jsx-2373991563\">CSS</a></h4></div><pre><code>.tagBackground {\n    width: 450px;\n    height: 200px;\n  color: yellow;\n  background-color: brown;\n  clip-path: polygon(0 33%, 0 66%, 16% 100%, 100% 100%, 100% 0, 16% 0);\n  position: relative;\n}\n\n.tag-circle {\n  clip-path: circle(25%);\n  background-color: white;\n  width: 60px;\n  height: 60px;\n  position: absolute;\n  top: 33%;\n  left: 4%;\n}\n\nspan {\n    color: yellow;\n    font-size: 4rem;\n    position: absolute;\n    top: 28%;\n    left: 32%;\n}\n</code></pre><div style=\"position:relative\"><span style=\"position:absolute;margin-left:-1.5em;font-weight:300;font-size:1.5rem;color:#9b9b9b\">#</span><h4 id=\"HTML\" class=\"jsx-2373991563\"><a href=\"#HTML\" class=\"jsx-2373991563\">HTML</a></h4></div><pre><code>&lt;div class=&#x27;tagBackground&#x27;&gt;\n  &lt;span&gt;30% OFF&lt;/span&gt;\n  &lt;div class=&quot;tag-circle&quot;&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div style=\"position:relative\"><span style=\"position:absolute;margin-left:-1.5em;font-weight:300;font-size:1.5rem;color:#9b9b9b\">#</span><h3 id=\"SVG%20React%20code%3a\" class=\"jsx-2373991563\"><a href=\"#SVG%20React%20code%3a\" class=\"jsx-2373991563\">SVG React code:</a></h3></div><p>Then I created <a href=\"https://codepen.io/bebrws/pen/QWgLZqX\">the SVG React component which scales</a></p><p><img src=\"../static/react-svg-tag.jpg\" alt=\"&quot;React SVG Scalable Tag&quot;\"/></p><pre><code>import React, { Component } from &quot;https://cdn.skypack.dev/react@17.0.1&quot;;\nimport { render } from &quot;https://cdn.skypack.dev/react-dom@17.0.1&quot;;\n\n\nfunction App({width}) {\n    const height = width/3;\n\n    const middle = height / 2;\n    const topMiddle = middle - (middle*.20);\n    const bottomMiddle = middle + (middle*.20);\n\n    const sideCut = width *.075;\n\n    const d = `0,${topMiddle},0,${bottomMiddle},${sideCut},${height},${width},${height},${width},0,${sideCut},0â€™`;\n    const ppath = `M${d}Z`;\n\n    return (\n      &lt;&gt;\n        &lt;br /&gt;\n        &lt;svg\n          width={`${width}px`}\n          height={`${height}px`}\n          viewBox={`0 0 ${width} ${height}`}\n        &gt;\n          &lt;rect width={`${width}`} height={`${height}`} fill=&quot;#efefef&quot; /&gt;\n          &lt;path\n            d={ppath}\n            fill=&quot;brown&quot;\n          /&gt;\n          &lt;circle fill=&quot;white&quot; cx={`${width * .1}`} cy={`${middle}`} r={`${width * .03}`} /&gt;\n          &lt;text font-size={&quot;2rem&quot;} x={`${width* .25}`} y={`${middle + middle * .125}`} fill=&quot;white&quot;&gt;30% OFF&lt;/text&gt;\n        &lt;/svg&gt;\n      &lt;/&gt;\n    );\n}\n\nrender(&lt;App width={400} /&gt;, document.getElementById(&#x27;root&#x27;));\n</code></pre><div style=\"position:relative\"><span style=\"position:absolute;margin-left:-1.5em;font-weight:300;font-size:1.5rem;color:#9b9b9b\">#</span><h4 id=\"HTML%3a\" class=\"jsx-2373991563\"><a href=\"#HTML%3a\" class=\"jsx-2373991563\">HTML:</a></h4></div><pre><code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\n</code></pre><div style=\"position:relative\"><span style=\"position:absolute;margin-left:-1.5em;font-weight:300;font-size:1.5rem;color:#9b9b9b\">#</span><h3 id=\"The%20real%20SVG%20component%20would%20take%20props%20for%20the%20fill%20colors%20so%20that%20this%20can%20be%20used%20on%20any%20background%2e%20For%20example%20the%20white%20abd%20brown%20would%20be%20props%2e\" class=\"jsx-2373991563\"><a href=\"#The%20real%20SVG%20component%20would%20take%20props%20for%20the%20fill%20colors%20so%20that%20this%20can%20be%20used%20on%20any%20background%2e%20For%20example%20the%20white%20abd%20brown%20would%20be%20props%2e\" class=\"jsx-2373991563\">The real SVG component would take props for the fill colors so that this can be used on any background. For example the white abd brown would be props.</a></h3></div>","scope":{"slug":"clip-path-vs-svg","title":"Using CSS Clip Path or SVGs","date":"2021-08-22","author":"bebrws","tags":["React","CSS","SVG"]}}},"__N_SSG":true}