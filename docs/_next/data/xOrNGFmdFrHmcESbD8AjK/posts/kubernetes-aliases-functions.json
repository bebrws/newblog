{"pageProps":{"title":"Kubernetes aliases and functions using fzf - updated","dateString":"2023-02-02","slug":"kubernetes-aliases-functions","description":"","tags":["kubernetes"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Note:\"), mdx(\"p\", null, \"Something with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"kubectl\"), \" gostring formatting changed in the last few years.\\nI have updated the code below to fix any breaking changes (they were in the execute shell helpers).\"), mdx(\"p\", null, \"I also added some functionality to get logs by deployment (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"klogsdeployment\"), \") so you can see the logs from all pods at once.\\nWhich I do not believe any of the tools that people are using do.\"), mdx(\"p\", null, \"The only requirement is running:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    brew install fzf\\n\")), mdx(\"p\", null, \"before hand.\"), mdx(\"h2\", null, \"The actual code ( add this to your .zshrc filec)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    alias kgp='kubectl get pods --all-namespaces'\\n    alias kgs='kubectl get services --all-namespaces'\\n\\n    function kLogsPreviewAllContainers() {\\n        kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace} {.metadata.name}{\\\"\\\\n\\\"}' | fzf --preview=\\\"kubectl logs {2} --namespace {1} --all-containers\\\" --preview-window=up:80%\\n    }\\n    alias klogsp=kLogsPreviewAllContainers\\n\\n    function kLogsAllContainers() {\\n        kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace} {.metadata.name}{\\\"\\\\n\\\"}' | fzf | read -r namespace pod\\n        kubectl logs $pod --namespace $namespace --all-containers -f\\n    }\\n    alias klogs=kLogsAllContainers\\n\\n    function kLogsAllContainersAllPodsInDeployment() {\\n        kubectl get deployments --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace} {.metadata.name}{\\\"\\\\n\\\"}' | fzf | read -r namespace deployment\\n        kubectl logs -f deployment/$deployment --namespace $namespace -f\\n    }\\n    alias klogsdeployment=kLogsAllContainersAllPodsInDeployment\\n\\n    function kLogsContainer() {\\n        # The first argument to this function should be the container name\\n        # kubectl get pods -o name | fzf --preview=\\\"kubectl logs {} --container $1 | tail -20\\\" --preview-window=up:80%\\n        local container\\n        container=$1\\n        if [[ ! -z \\\"${container// }\\\" ]]; then\\n            kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace} {.metadata.name}{\\\"\\\\n\\\"}' | fzf --preview=\\\"echo kubectl logs {2} --namespace {1} --container $container\\\" --preview-window=up:80% --preview-label=\\\"Logs for container $1\\\"\\n        else\\n            print \\\"Usage: kLogsContainer <container name>\\\"\\n        fi\\n    }\\n\\n    function kexSh() {\\n        local containers\\n        local container\\n        kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\\\"\\\\t\\\"}{.metadata.name}{\\\"\\\\n\\\"}' | fzf | read -r namespace pod\\n        containers=$(kubectl get pod -n $namespace $pod -o jsonpath='{.spec.containers[*].name}')\\n        container=$(echo ${containers/ /\\\\\\\\n} | fzf)\\n        kubectl exec -n $namespace --stdin --tty $pod --container $containers -- /bin/sh\\n    }\\n\\n\\n    function kexBash() {\\n        local containers\\n        local container\\n        kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\\\"\\\\t\\\"}{.metadata.name}{\\\"\\\\n\\\"}' | fzf | read -r namespace pod\\n        containers=$(kubectl get pod -n $namespace $pod -o jsonpath='{.spec.containers[*].name}')\\n        container=$(echo ${containers/ /\\\\\\\\n} | fzf)\\n        kubectl exec -n $namespace --stdin --tty $pod --container $container -- /bin/bash\\n    }\\n\\n    function kd() {\\n        kubectl get $1 --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\\\"\\\\t\\\"}{.metadata.name}{\\\"\\\\n\\\"}' | fzf --preview=\\\"echo '{}' | xargs kubectl describe $1 -n\\\" | xargs kubectl describe $1 -n\\n    }\\n\\n    function kdelete() {\\n        kubectl get $1 --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\\\"\\\\t\\\"}{.metadata.name}{\\\"\\\\n\\\"}' | fzf | xargs kubectl delete $1 -n\\n    }\\n\\n    alias kdpod='kd pod'\\n\\n    alias kdelpod='kdelete pod'\\n\\n    alias kdservice='kd service'\\n\\n    alias kdelservice='kdelete service'\\n\\n    alias kg='kubectl get '\\n\\n    function kgevents() {  kubectl get events --sort-by='.metadata.creationTimestamp'  }\\n    alias kgev=kgevents\\n\\n\")), mdx(\"h2\", null, \"Helpful Kubernetes Aliases and Functions Explained\"), mdx(\"p\", null, \"I use fzf pretty extensively. I really appreciate how much time it can save looking up something like an id or namespace which will just need to be copied into the next command.\"), mdx(\"p\", null, \"To save time I created a number of alises and functions which work with Kubernetes' kubectl to help me get information about a cluster and also exec shells.\"), mdx(\"p\", null, \"It starts off with some aliases to help with monotonous tasks like getting a specific column and then there are some helpful command to describe and delete resources\"), mdx(\"h3\", null, \"Describing resources\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/kdpod.gif\",\n    \"alt\": \"Describing pods\"\n  })), mdx(\"p\", null, \"You could run:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    kd service\\n\")), mdx(\"p\", null, \"or\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    kdservices\\n\")), mdx(\"p\", null, \"For pods:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    kd pod\\n\")), mdx(\"p\", null, \"or\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    kdpods\\n\")), mdx(\"p\", null, \"The kd function will work with any resource type.\"), mdx(\"p\", null, \"So\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    kd ingress\\n\")), mdx(\"p\", null, \"will even work to list all ingresses in all namespaces and then describe the one you select.\"), mdx(\"p\", null, \"Command starting with kdel will delete resources.\"), mdx(\"h3\", null, \"Spawning a shell on a pod in a container\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/kexsh.gif\",\n    \"alt\": \"Spawning a shell on a pod in a container\"\n  })), mdx(\"p\", null, \"To run a shell on a pod in a container run:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    kexBash\\n\")), mdx(\"p\", null, \"or\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    kexSH\\n\")), mdx(\"p\", null, \"These are pretty useful little functions.\"), mdx(\"p\", null, \"You will be able to select the pod you want to a shell into, and then a secondary fzf selection will occur for the container.\"), mdx(\"h3\", null, \"Kubernetes Events ( Debugging Issues )\"), mdx(\"p\", null, \"The last and mose useful of all these is probably just getting events in a sorted order (by timestamp).\"), mdx(\"p\", null, \"Kubernetes events has helped me debug by far the majority of the more challenging Kubernetes issues I hace run into.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    kgevents\\n\")), mdx(\"h4\", null, \"Why are events useful?\"), mdx(\"p\", null, \"When I run into frustrating issues with Kubernetes, things that I overlooked, I am usually able to pretty quickly figure out what I missed just by looking at the events being logged.\"), mdx(\"p\", null, \"For example, if you are missing some secret or something needed for a volume to mount, that will show up in Kubernetes events if I remember correctly.\"), mdx(\"p\", null, \"I would deffinately recommend checking it out if you ever are stuck.\"));\n}\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1>Note:</h1><p>Something with <em>kubectl</em> gostring formatting changed in the last few years.\nI have updated the code below to fix any breaking changes (they were in the execute shell helpers).</p><p>I also added some functionality to get logs by deployment (<em>klogsdeployment</em>) so you can see the logs from all pods at once.\nWhich I do not believe any of the tools that people are using do.</p><p>The only requirement is running:</p><pre><code>    brew install fzf\n</code></pre><p>before hand.</p><h2>The actual code ( add this to your .zshrc filec)</h2><pre><code>    alias kgp=&#x27;kubectl get pods --all-namespaces&#x27;\n    alias kgs=&#x27;kubectl get services --all-namespaces&#x27;\n\n    function kLogsPreviewAllContainers() {\n        kubectl get pods --all-namespaces -o jsonpath=&#x27;{range .items[*]}{.metadata.namespace} {.metadata.name}{&quot;\\n&quot;}&#x27; | fzf --preview=&quot;kubectl logs {2} --namespace {1} --all-containers&quot; --preview-window=up:80%\n    }\n    alias klogsp=kLogsPreviewAllContainers\n\n    function kLogsAllContainers() {\n        kubectl get pods --all-namespaces -o jsonpath=&#x27;{range .items[*]}{.metadata.namespace} {.metadata.name}{&quot;\\n&quot;}&#x27; | fzf | read -r namespace pod\n        kubectl logs $pod --namespace $namespace --all-containers -f\n    }\n    alias klogs=kLogsAllContainers\n\n    function kLogsAllContainersAllPodsInDeployment() {\n        kubectl get deployments --all-namespaces -o jsonpath=&#x27;{range .items[*]}{.metadata.namespace} {.metadata.name}{&quot;\\n&quot;}&#x27; | fzf | read -r namespace deployment\n        kubectl logs -f deployment/$deployment --namespace $namespace -f\n    }\n    alias klogsdeployment=kLogsAllContainersAllPodsInDeployment\n\n    function kLogsContainer() {\n        # The first argument to this function should be the container name\n        # kubectl get pods -o name | fzf --preview=&quot;kubectl logs {} --container $1 | tail -20&quot; --preview-window=up:80%\n        local container\n        container=$1\n        if [[ ! -z &quot;${container// }&quot; ]]; then\n            kubectl get pods --all-namespaces -o jsonpath=&#x27;{range .items[*]}{.metadata.namespace} {.metadata.name}{&quot;\\n&quot;}&#x27; | fzf --preview=&quot;echo kubectl logs {2} --namespace {1} --container $container&quot; --preview-window=up:80% --preview-label=&quot;Logs for container $1&quot;\n        else\n            print &quot;Usage: kLogsContainer &lt;container name&gt;&quot;\n        fi\n    }\n\n    function kexSh() {\n        local containers\n        local container\n        kubectl get pods --all-namespaces -o jsonpath=&#x27;{range .items[*]}{.metadata.namespace}{&quot;\\t&quot;}{.metadata.name}{&quot;\\n&quot;}&#x27; | fzf | read -r namespace pod\n        containers=$(kubectl get pod -n $namespace $pod -o jsonpath=&#x27;{.spec.containers[*].name}&#x27;)\n        container=$(echo ${containers/ /\\\\n} | fzf)\n        kubectl exec -n $namespace --stdin --tty $pod --container $containers -- /bin/sh\n    }\n\n\n    function kexBash() {\n        local containers\n        local container\n        kubectl get pods --all-namespaces -o jsonpath=&#x27;{range .items[*]}{.metadata.namespace}{&quot;\\t&quot;}{.metadata.name}{&quot;\\n&quot;}&#x27; | fzf | read -r namespace pod\n        containers=$(kubectl get pod -n $namespace $pod -o jsonpath=&#x27;{.spec.containers[*].name}&#x27;)\n        container=$(echo ${containers/ /\\\\n} | fzf)\n        kubectl exec -n $namespace --stdin --tty $pod --container $container -- /bin/bash\n    }\n\n    function kd() {\n        kubectl get $1 --all-namespaces -o jsonpath=&#x27;{range .items[*]}{.metadata.namespace}{&quot;\\t&quot;}{.metadata.name}{&quot;\\n&quot;}&#x27; | fzf --preview=&quot;echo &#x27;{}&#x27; | xargs kubectl describe $1 -n&quot; | xargs kubectl describe $1 -n\n    }\n\n    function kdelete() {\n        kubectl get $1 --all-namespaces -o jsonpath=&#x27;{range .items[*]}{.metadata.namespace}{&quot;\\t&quot;}{.metadata.name}{&quot;\\n&quot;}&#x27; | fzf | xargs kubectl delete $1 -n\n    }\n\n    alias kdpod=&#x27;kd pod&#x27;\n\n    alias kdelpod=&#x27;kdelete pod&#x27;\n\n    alias kdservice=&#x27;kd service&#x27;\n\n    alias kdelservice=&#x27;kdelete service&#x27;\n\n    alias kg=&#x27;kubectl get &#x27;\n\n    function kgevents() {  kubectl get events --sort-by=&#x27;.metadata.creationTimestamp&#x27;  }\n    alias kgev=kgevents\n\n</code></pre><h2>Helpful Kubernetes Aliases and Functions Explained</h2><p>I use fzf pretty extensively. I really appreciate how much time it can save looking up something like an id or namespace which will just need to be copied into the next command.</p><p>To save time I created a number of alises and functions which work with Kubernetes&#x27; kubectl to help me get information about a cluster and also exec shells.</p><p>It starts off with some aliases to help with monotonous tasks like getting a specific column and then there are some helpful command to describe and delete resources</p><h3>Describing resources</h3><p><img src=\"/static/kdpod.gif\" alt=\"Describing pods\"/></p><p>You could run:</p><pre><code>    kd service\n</code></pre><p>or</p><pre><code>    kdservices\n</code></pre><p>For pods:</p><pre><code>    kd pod\n</code></pre><p>or</p><pre><code>    kdpods\n</code></pre><p>The kd function will work with any resource type.</p><p>So</p><pre><code>    kd ingress\n</code></pre><p>will even work to list all ingresses in all namespaces and then describe the one you select.</p><p>Command starting with kdel will delete resources.</p><h3>Spawning a shell on a pod in a container</h3><p><img src=\"/static/kexsh.gif\" alt=\"Spawning a shell on a pod in a container\"/></p><p>To run a shell on a pod in a container run:</p><pre><code>    kexBash\n</code></pre><p>or</p><pre><code>    kexSH\n</code></pre><p>These are pretty useful little functions.</p><p>You will be able to select the pod you want to a shell into, and then a secondary fzf selection will occur for the container.</p><h3>Kubernetes Events ( Debugging Issues )</h3><p>The last and mose useful of all these is probably just getting events in a sorted order (by timestamp).</p><p>Kubernetes events has helped me debug by far the majority of the more challenging Kubernetes issues I hace run into.</p><pre><code>    kgevents\n</code></pre><h4>Why are events useful?</h4><p>When I run into frustrating issues with Kubernetes, things that I overlooked, I am usually able to pretty quickly figure out what I missed just by looking at the events being logged.</p><p>For example, if you are missing some secret or something needed for a volume to mount, that will show up in Kubernetes events if I remember correctly.</p><p>I would deffinately recommend checking it out if you ever are stuck.</p>","scope":{"slug":"kubernetes-aliases-functions","title":"Kubernetes aliases and functions using fzf - updated","date":"2023-02-02","author":"bebrws","tags":["kubernetes"]}}},"__N_SSG":true}