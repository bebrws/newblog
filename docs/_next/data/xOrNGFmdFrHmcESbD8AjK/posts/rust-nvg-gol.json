{"pageProps":{"title":"Conways Game Of Life and the Rust NVG Library","dateString":"2020-10-01","slug":"rust-nvg-gol","description":"","tags":["rust"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Why?\"), mdx(\"p\", null, \"So I have been crazy impressed with how fast Alacritty is. And I want to know more.\"), mdx(\"p\", null, \"I know I read somewhere that one of the libraries that Alacritty uses (or maybe it was just a random Rust OpenGL based library) actually does some cool React style tricks to improve performance. Something about diffing changes so that it know what changed and only re renders what it needs to.\"), mdx(\"p\", null, \"This combined with the speed of the OpenGL Graphics pipeline must be what gives Alacritty so much awesomeness. Other than the quality Rust code that the author wrote of course.\"), mdx(\"p\", null, \"So I wanted to play around with some of these Rust graphics libraries and see if I could find a fast, easy to use way to:\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \" Render 2D text\\n\"), \" Render 2D images\"), mdx(\"p\", null, \"This is actually much harder then it sounds. Due to the fact that all fast graphics rendering is going to have to be done in a 3D environment. Meaning something like OpenGL. This means that something which sounds simple, such as drawing an image or rectangle to the screen, is now challenging to implement.\"), mdx(\"p\", null, \"To draw an image for example you end up having to draw multiple triangles, loading a texture, mapping the texture to the triangles and rendering that. Not too mention all the insane amount of work it takes to just setup up the 3D environment when all you want to do is to render 2D images/shapes..\"), mdx(\"p\", null, \"So to get going on this I choose to implement a Conway's Game Of Life app.\"), mdx(\"p\", null, \"In searching through libraries I stumbled upon the Rust nvg library.\"), mdx(\"p\", null, \"This library is pretty awesome. It has an insanely easy to use API and very powerful.\"), mdx(\"p\", null, \"The big downside for me though is that it is very slow. Try out my Game of Life implementaiton and you'll see you end up with 20 FPS on a good laptop in 2020.\"), mdx(\"h2\", null, \"What's next?\"), mdx(\"p\", null, \"On to the next library.\"), mdx(\"p\", null, \"I have a square rendering using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/amethyst/rendy\"\n  }, \"rendy\"), \" which is using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/gfx-rs/gfx\"\n  }, \"gfx-hal\"), \" underneath and is very fast. I am stuck on fixing the projection so that my aspect ratio isn't out of whack for full screen which I want.\"), mdx(\"p\", null, \"Other choices look to be:\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \" \", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://github.com/PistonDevelopers/conrod\"\n  }, \"Conrod\")), \" Lower level \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/PistonDevelopers/piston-examples\"\n  }, \"Piston\"), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \" Lower Level \", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://github.com/gfx-rs/gfx\"\n  }, \"GFX\")), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/amethyst/rendy\"\n  }, \"Rendy\")), mdx(\"h2\", null, \"How does it look?\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"../static/gol.gif\",\n    \"alt\": \"image of game of life run\"\n  })), mdx(\"h2\", null, \"Code\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/bebrws/gol-nvg\"\n  }, \"My code is here\")), mdx(\"h2\", null, \"Amendment\"), mdx(\"p\", null, \"It turns out that these 2 repos/crates do everything I am looking for:\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \" \", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://github.com/PistonDevelopers/Piston-Tutorials/blob/master/getting-started/readme.md\"\n  }, \"General Piston Guide\")), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/PistonDevelopers/opengl_graphics\"\n  }, \"Piston OpenGL graphics\")));\n}\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h2>Why?</h2><p>So I have been crazy impressed with how fast Alacritty is. And I want to know more.</p><p>I know I read somewhere that one of the libraries that Alacritty uses (or maybe it was just a random Rust OpenGL based library) actually does some cool React style tricks to improve performance. Something about diffing changes so that it know what changed and only re renders what it needs to.</p><p>This combined with the speed of the OpenGL Graphics pipeline must be what gives Alacritty so much awesomeness. Other than the quality Rust code that the author wrote of course.</p><p>So I wanted to play around with some of these Rust graphics libraries and see if I could find a fast, easy to use way to:\n<em> Render 2D text\n</em> Render 2D images</p><p>This is actually much harder then it sounds. Due to the fact that all fast graphics rendering is going to have to be done in a 3D environment. Meaning something like OpenGL. This means that something which sounds simple, such as drawing an image or rectangle to the screen, is now challenging to implement.</p><p>To draw an image for example you end up having to draw multiple triangles, loading a texture, mapping the texture to the triangles and rendering that. Not too mention all the insane amount of work it takes to just setup up the 3D environment when all you want to do is to render 2D images/shapes..</p><p>So to get going on this I choose to implement a Conway&#x27;s Game Of Life app.</p><p>In searching through libraries I stumbled upon the Rust nvg library.</p><p>This library is pretty awesome. It has an insanely easy to use API and very powerful.</p><p>The big downside for me though is that it is very slow. Try out my Game of Life implementaiton and you&#x27;ll see you end up with 20 FPS on a good laptop in 2020.</p><h2>What&#x27;s next?</h2><p>On to the next library.</p><p>I have a square rendering using <a href=\"https://github.com/amethyst/rendy\">rendy</a> which is using <a href=\"https://github.com/gfx-rs/gfx\">gfx-hal</a> underneath and is very fast. I am stuck on fixing the projection so that my aspect ratio isn&#x27;t out of whack for full screen which I want.</p><p>Other choices look to be:\n<em> <a href=\"https://github.com/PistonDevelopers/conrod\">Conrod</a></em> Lower level <a href=\"https://github.com/PistonDevelopers/piston-examples\">Piston</a>\n<em> Lower Level <a href=\"https://github.com/gfx-rs/gfx\">GFX</a></em> <a href=\"https://github.com/amethyst/rendy\">Rendy</a></p><h2>How does it look?</h2><p><img src=\"../static/gol.gif\" alt=\"image of game of life run\"/></p><h2>Code</h2><p><a href=\"https://github.com/bebrws/gol-nvg\">My code is here</a></p><h2>Amendment</h2><p>It turns out that these 2 repos/crates do everything I am looking for:\n<em> <a href=\"https://github.com/PistonDevelopers/Piston-Tutorials/blob/master/getting-started/readme.md\">General Piston Guide</a></em> <a href=\"https://github.com/PistonDevelopers/opengl_graphics\">Piston OpenGL graphics</a></p>","scope":{"slug":"rust-nvg-gol","title":"Conways Game Of Life and the Rust NVG Library","date":"2020-10-01","author":"bebrws","tags":["rust"]}}},"__N_SSG":true}