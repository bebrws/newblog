{"pageProps":{"title":"Animating SVGs using CSS - using Affinity Designer to create SVGs","dateString":"2020-11-01","slug":"shark-svg","description":"","tags":["css","svg","react","javascript"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"What is this?\"), mdx(\"p\", null, \"Example for creating an SVG in Affinity Designer and then exporting as an SVG and animating using CSS.\"), mdx(\"p\", null, \"I wanted to see how I could animate some of the SVGs I had been drawing using Affinity Designer.\"), mdx(\"p\", null, \"To animate I am using CSS only.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/bebrws/shark-animation\"\n  }, \"My code is here\")), mdx(\"h1\", null, \"How?\"), mdx(\"p\", null, \"You can name a group or single layer in AD (Affinity Designer).\\nThis will set a CSS ID to the group name you have in AD.\"), mdx(\"p\", null, \"You can then use CSS to transform or animate whatever you have the ID for.\"), mdx(\"p\", null, \"In shark-animcation/index.html you can see how I animate using CSS.\"), mdx(\"p\", null, \"If you open up the AD file here you can see I took my shark I had drawn as a solid object and broke up the path around the mouth. Then named everything I needed to move with a name ending in Head.\"), mdx(\"p\", null, \"Then I copied over the SVG into my html and was able to use the css IDs to animate.\"), mdx(\"h1\", null, \"CSS Code\"), mdx(\"p\", null, \"The css code I used is pretty simple. Just an animation to move the mouth and another to move the shark. The way animations work in CSS I am able to set the inital state of an object. In this case the object is either the whole shark or different parts of the shark drawing. Then I can set the final state, or where I want to animate \\\"to\\\". And then set the time it takes to animate betweeen these two states and the acceleration in change used (I used linear here).\"), mdx(\"p\", null, \"The CSS Code is :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\n\\n  #wholeShark {\\n      /* width: 500px; */\\n      transform: translate(-400px, 0px);\\n      animation: moveShark 2s linear forwards;\\n  }\\n  @keyframes moveShark {\\n      to {\\n          transform: translate(100px, 0px);\\n      }\\n  }\\n\\n  #SharkEyeHead, #SharkNoseStuffHead, #SharkStylHead, #SharkBackgroundHead {\\n      transform: rotate(-6deg) translate(-105px, 190px);\\n      animation: moveMouth .3s linear forwards;\\n      animation-direction: alternate;\\n      animation-iteration-count: infinite;\\n  }\\n\\n  @keyframes moveMouth {\\n      to {\\n          transform: rotate(0deg) translate(0px, 0px);\\n      }\\n  }\\n\\n\")), mdx(\"h2\", null, \"How does it look?\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://bebrws.github.io/shark-animation/index.html\"\n  }, \"Click here to see it hosted on its own\")));\n}\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1>What is this?</h1><p>Example for creating an SVG in Affinity Designer and then exporting as an SVG and animating using CSS.</p><p>I wanted to see how I could animate some of the SVGs I had been drawing using Affinity Designer.</p><p>To animate I am using CSS only.</p><p><a href=\"https://github.com/bebrws/shark-animation\">My code is here</a></p><h1>How?</h1><p>You can name a group or single layer in AD (Affinity Designer).\nThis will set a CSS ID to the group name you have in AD.</p><p>You can then use CSS to transform or animate whatever you have the ID for.</p><p>In shark-animcation/index.html you can see how I animate using CSS.</p><p>If you open up the AD file here you can see I took my shark I had drawn as a solid object and broke up the path around the mouth. Then named everything I needed to move with a name ending in Head.</p><p>Then I copied over the SVG into my html and was able to use the css IDs to animate.</p><h1>CSS Code</h1><p>The css code I used is pretty simple. Just an animation to move the mouth and another to move the shark. The way animations work in CSS I am able to set the inital state of an object. In this case the object is either the whole shark or different parts of the shark drawing. Then I can set the final state, or where I want to animate &quot;to&quot;. And then set the time it takes to animate betweeen these two states and the acceleration in change used (I used linear here).</p><p>The CSS Code is :</p><pre><code>\n\n  #wholeShark {\n      /* width: 500px; */\n      transform: translate(-400px, 0px);\n      animation: moveShark 2s linear forwards;\n  }\n  @keyframes moveShark {\n      to {\n          transform: translate(100px, 0px);\n      }\n  }\n\n  #SharkEyeHead, #SharkNoseStuffHead, #SharkStylHead, #SharkBackgroundHead {\n      transform: rotate(-6deg) translate(-105px, 190px);\n      animation: moveMouth .3s linear forwards;\n      animation-direction: alternate;\n      animation-iteration-count: infinite;\n  }\n\n  @keyframes moveMouth {\n      to {\n          transform: rotate(0deg) translate(0px, 0px);\n      }\n  }\n\n</code></pre><h2>How does it look?</h2><p><a href=\"https://bebrws.github.io/shark-animation/index.html\">Click here to see it hosted on its own</a></p>","scope":{"slug":"shark-svg","title":"Animating SVGs using CSS - using Affinity Designer to create SVGs","date":"2020-11-01","author":"bebrws","tags":["css","svg","react","javascript"]}}},"__N_SSG":true}