{"pageProps":{"title":"Use FFMPEG (OSX/Linux) to Record Audio And OpenAI ChatGPT to Answer Questions","dateString":"2023-03-01","slug":"record-audio-and-talk-to-chatgpt","description":"","tags":["OpenAI","ChatGPT","Whisper","AI","Machine Learning"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Quick script to record audio and send it off to ChatGPT\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/whisper.mov.gif\",\n    \"alt\": \"Recording audio and sending it to ChatGPT\"\n  })), mdx(\"p\", null, \"This script records 10 seconds of audio, saves it to an MP3 file and then sends it off to ChatGPT all from your terminal with one command.\\nIt requires you set your OPENAPI Key on the second line.\"), mdx(\"p\", null, \"First install openai cli\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"pip install openai\\n\")), mdx(\"p\", null, \"and install ffmpeg (OSX):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"brew install ffmpeg\\n\")), mdx(\"p\", null, \"Save this as file: voiceToChatGPT.zsh\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"#!/usr/bin/env zsh\\nexport OPENAI_API_KEY=\\\"YOUR_OPENAPI_KEY_HERE\\\"\\nffmpeg -y -f avfoundation -i \\\":1\\\" -t 10  audiocapture.mp3 # stops recording on control c\\n\\n# Read the resulting transcript from the output file\\nTRANSCRIPT=$(openai api audio.transcribe -f audiocapture.mp3 | jq \\\".text\\\")\\n\\necho \\\"Whisper API transcript: $TRANSCRIPT\\\"\\n\\nopenai api chat_completions.create  -m gpt-3.5-turbo -g user \\\"$TRANSCRIPT ###\\\"\\n\")), mdx(\"p\", null, \"Make it executable:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"chmod +x voiceToChatGPT.zsh\\n\")), mdx(\"p\", null, \"Then run it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"./voiceToChatGPT.zsh\\n\")), mdx(\"p\", null, \"It will record for 10 seconds which is the parameter \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-t 10\"), \" from the first ffmpeg command.\"), mdx(\"h1\", null, \"Improvement\"), mdx(\"p\", null, \"Find a way to record audio until your done with your prompt/idea\"), mdx(\"h1\", null, \"Possible Issue and Solution\"), mdx(\"p\", null, \"To find your audio device to record with run:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"ffmpeg -f avfoundation -list_devices true -i \\\"\\\"\\n\")), mdx(\"p\", null, \"Then change the \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"-i \\\":3\\\"\\n\")), mdx(\"p\", null, \"from the first ffmpeg command.\"));\n}\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1>Quick script to record audio and send it off to ChatGPT</h1><p><img src=\"/static/whisper.mov.gif\" alt=\"Recording audio and sending it to ChatGPT\"/></p><p>This script records 10 seconds of audio, saves it to an MP3 file and then sends it off to ChatGPT all from your terminal with one command.\nIt requires you set your OPENAPI Key on the second line.</p><p>First install openai cli</p><pre><code>pip install openai\n</code></pre><p>and install ffmpeg (OSX):</p><pre><code>brew install ffmpeg\n</code></pre><p>Save this as file: voiceToChatGPT.zsh</p><pre><code>#!/usr/bin/env zsh\nexport OPENAI_API_KEY=&quot;YOUR_OPENAPI_KEY_HERE&quot;\nffmpeg -y -f avfoundation -i &quot;:1&quot; -t 10  audiocapture.mp3 # stops recording on control c\n\n# Read the resulting transcript from the output file\nTRANSCRIPT=$(openai api audio.transcribe -f audiocapture.mp3 | jq &quot;.text&quot;)\n\necho &quot;Whisper API transcript: $TRANSCRIPT&quot;\n\nopenai api chat_completions.create  -m gpt-3.5-turbo -g user &quot;$TRANSCRIPT ###&quot;\n</code></pre><p>Make it executable:</p><pre><code>chmod +x voiceToChatGPT.zsh\n</code></pre><p>Then run it:</p><pre><code>./voiceToChatGPT.zsh\n</code></pre><p>It will record for 10 seconds which is the parameter <code>-t 10</code> from the first ffmpeg command.</p><h1>Improvement</h1><p>Find a way to record audio until your done with your prompt/idea</p><h1>Possible Issue and Solution</h1><p>To find your audio device to record with run:</p><pre><code>ffmpeg -f avfoundation -list_devices true -i &quot;&quot;\n</code></pre><p>Then change the </p><pre><code>-i &quot;:3&quot;\n</code></pre><p>from the first ffmpeg command.</p>","scope":{"slug":"record-audio-and-talk-to-chatgpt","title":"Use FFMPEG (OSX/Linux) to Record Audio And OpenAI ChatGPT to Answer Questions","date":"2023-03-01","author":"bebrws","tags":["OpenAI","ChatGPT","Whisper","AI","Machine Learning"]}}},"__N_SSG":true}