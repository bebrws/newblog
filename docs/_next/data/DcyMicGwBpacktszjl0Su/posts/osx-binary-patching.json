{"pageProps":{"title":"How to patch a binary and get it to run on OSX","dateString":"2024-08-08","slug":"osx-binary-patching","description":"","tags":["osx","reverse-engineering","binary","hex","patching","security"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Getting a patched binary to run on OSX\"), mdx(\"p\", null, \"Say you are reverse engineering some application on OSX and have modified the\\nbinary in a hex editor. You can't just run the binary because OSX has a\\nnumber of security features.\"), mdx(\"p\", null, \"First off I have gatekeeper disabled on my machine. You can do this by running:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"sudo spctl --master-disable\\n\")), mdx(\"p\", null, \"Although I do not believe this is necessary if you codesign the binary after patching.\"), mdx(\"p\", null, \"So after patching the binary I codesign the binary with an ID I get from the following list:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"security find-identity -v -p codesigning\\n\")), mdx(\"p\", null, \"Then take the ID from the above command and run the following command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"sudo codesign --force --sign {ID FROM ABOVE} patched-binary\\n\")), mdx(\"p\", null, \"Then I had to unquarantine the binary by running:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"xattr -d com.apple.quarantine patched-binary\\n\")), mdx(\"p\", null, \"Then I was able to run the binary.\"));\n}\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h2>Getting a patched binary to run on OSX</h2><p>Say you are reverse engineering some application on OSX and have modified the\nbinary in a hex editor. You can&#x27;t just run the binary because OSX has a\nnumber of security features.</p><p>First off I have gatekeeper disabled on my machine. You can do this by running:</p><pre><code>sudo spctl --master-disable\n</code></pre><p>Although I do not believe this is necessary if you codesign the binary after patching.</p><p>So after patching the binary I codesign the binary with an ID I get from the following list:</p><pre><code>security find-identity -v -p codesigning\n</code></pre><p>Then take the ID from the above command and run the following command:</p><pre><code>sudo codesign --force --sign {ID FROM ABOVE} patched-binary\n</code></pre><p>Then I had to unquarantine the binary by running:</p><pre><code>xattr -d com.apple.quarantine patched-binary\n</code></pre><p>Then I was able to run the binary.</p>","scope":{"slug":"osx-binary-patching","title":"How to patch a binary and get it to run on OSX","date":"2024-08-08","author":"bebrws","tags":["osx","reverse-engineering","binary","hex","patching","security"]}}},"__N_SSG":true}