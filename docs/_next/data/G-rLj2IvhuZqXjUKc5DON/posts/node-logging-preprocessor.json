{"pageProps":{"title":"A NodeJS “Preprocessor” Can Add Any Functionality Including Easy Logging","dateString":"2024-08-23","slug":"node-logging-preprocessor","description":"","tags":["NodeJS","preprocessor","logging","extend","hack","customize"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"The Problem and Solution?\"), mdx(\"p\", null, \"Ever forget one of these:\\n\", mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/forgotten-consolelog.png\",\n    \"alt\": \"An image showing a console.log statement that was supposed to be removed from the submitted LeetCode test runner\"\n  }), \"\\nA console.log statement that needs to be removed before submitting from the LeetCode test runner.\\nYes, I know we should all be good enough to not need to ever use console.log statements, or to even iterate for that matter but sometimes I find myself tired and working on a project and just want to double check my data structure is in the correct state.\"), mdx(\"p\", null, \"The issue however, is that I find it very annoying to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Have to remove these console.log statements all the time when submitting to the LeetCode test runner\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sometimes I want to keep them around in case I want to come back and iterate on this data structure or algorithm later\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It isn't always clear right away if your submission passes but is incrediblys slow if you just forgot to remove a console.log or if your code is sub par\")), mdx(\"p\", null, \"Hence the creation of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodelog\"), \"! A NodeJS preprocessor that will not only allow you to console.log anything that has a String representation but that uses comments to dictate what to log so that whenever the code is ran without the preprocessor, the log statements are ignored.\"), mdx(\"p\", null, \"Behold:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/nodelog720.mov.gif\",\n    \"alt\": \"An animated gif showing the usage of the NodeJS \\\"preprocessor\\\"\"\n  })), mdx(\"p\", null, \"And all this requires is a single Javascript file which is only ran whenever you use whichever alias you use to include this file. In this example, I use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodelog\"), \" as my alias which usesa a NodeJS argument to require a Javascript file before running the actual code.\"), mdx(\"h1\", null, \"PreProcessors\"), mdx(\"p\", null, \"So most languages have what are called preprocessors. This is a compilation step where your source code is taken and modified before it is actually compiled.\"), mdx(\"p\", null, \"For exmaple, a C preprocessor is a tool that processes source code before the actual compilation begins. It handles directives that begin with #, such as #include to include files, #define to create macros, and #ifdef for conditional compilation. The preprocessor replaces macros (all those #define lines), includes the contents of header files, and conditionally compiles code, producing a modified source file that is then passed to the compiler.\"), mdx(\"p\", null, \"In other languages, macros are usually great ways to re use code without needing a function and as a result inlinnig the code defined by the macro.\"), mdx(\"h1\", null, \"NodeJS and Preprocessors\"), mdx(\"p\", null, \"NodeJS doesn't have any sort of preprocessor step.\\nIT does however have an option to run a file before execution. And with this you can do some things like maybe alias console.log to a function cl:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"global.cl = console.log\\n\")), mdx(\"p\", null, \"But I was having issues where I would write some code for LeetCode and maybe leave in a few console.log calls which severely slows down execution time.\"), mdx(\"p\", null, \"I also wanted a way that would amke it easier to log out different values without having to write so much code.\"), mdx(\"p\", null, \"To do so I created my own NodejS \\\"PreProcessor\\\" which will add the ability for me to easily log out anything I want with a comment starting with:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"//log - \"), \" followed by whatever statements I want logged.\"), mdx(\"p\", null, \"This way, when I run locally, I can see the output of the logs, but when I submit to LeetCode or anywhere else for that matter, the log lines are just ignored.\"), mdx(\"p\", null, \"I also created a shell/zsh alias so that this preprocessor is only used when I run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodelog\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node\"), \". Just to be safe and not mess with my actual node setup.\"), mdx(\"h2\", null, \"Setup:\"), mdx(\"p\", null, \"I created this file in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.config/nodelog.js\"), \" and added the following code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const fs = require(\\\"fs\\\");\\nconst vm = require(\\\"vm\\\");\\n\\nconst BOLD = `\\\\\\\\x1b[1m`;\\n\\n// Basic Text Color Codes\\nconst BLACK = `\\\\\\\\x1b[30m`;\\nconst RED = `\\\\\\\\x1b[31m`;\\nconst GREEN = `\\\\\\\\x1b[32m`;\\nconst YELLOW = `\\\\\\\\x1b[33m`;\\nconst BLUE = `\\\\\\\\x1b[34m`;\\nconst MAGENTA = `\\\\\\\\x1b[35m`;\\nconst CYAN = `\\\\\\\\x1b[36m`;\\nconst WHITE = `\\\\\\\\x1b[37m`;\\n\\n// Bright Text Color Codes\\nconst BRIGHT_BLACK = `\\\\\\\\x1b[90m`;\\nconst BRIGHT_RED = `\\\\\\\\x1b[91m`;\\nconst BRIGHT_GREEN = `\\\\\\\\x1b[92m`;\\nconst BRIGHT_YELLOW = `\\\\\\\\x1b[93m`;\\nconst BRIGHT_BLUE = `\\\\\\\\x1b[94m`;\\nconst BRIGHT_MAGENTA = `\\\\\\\\x1b[95m`;\\nconst BRIGHT_CYAN = `\\\\\\\\x1b[96m`;\\nconst BRIGHT_WHITE = `\\\\\\\\x1b[97m`;\\n\\n// Reset Code\\nconst RESET = `\\\\\\\\x1b[0m`;\\n\\nfunction preprocessAndRunJavaScript(inputFile) {\\n  // Read the content of the input file\\n  const fileContent = fs.readFileSync(inputFile, \\\"utf-8\\\");\\n\\n  // Regular expression to match lines with the `// log -` pattern\\n  const logRegex = /\\\\/\\\\/\\\\s*log\\\\s*-\\\\s*(.+)/g;\\n\\n  // Replace matched lines with the corresponding console.log statement\\n  const processedContent = fileContent.replace(logRegex, (match, p1) => {\\n    const variables = p1.split(\\\",\\\");\\n\\n    // Determine the maximum length of variable names for proper alignment\\n    const maxLength = Math.max(...variables.map(v => v.trim().length));\\n\\n    const logStatement = variables\\n      .map((v) => {\\n        // Pad variable names to align the columns\\n        const paddedVar = v.trim().padEnd(maxLength);\\n        return `\\\"${BRIGHT_WHITE}${BOLD}${paddedVar}${RESET}: \\\", ${v}, \\\"\\\\\\\\t\\\"`;\\n      })\\n      .join(\\\", \\\");\\n\\n    return `console.log(${logStatement});`;\\n  });\\n\\n  // Create a new script from the processed content\\n  const script = new vm.Script(processedContent);\\n\\n  // Run the script in the current context\\n  script.runInThisContext();\\n  process.exit(0);\\n}\\n\\n// Get the file path from the command line arguments\\nconst inputFile = process.argv[1];\\n\\nif (!inputFile) {\\n  console.error(\\\"Please provide an input file\\\");\\n  process.exit(1);\\n}\\npreprocessAndRunJavaScript(inputFile);\\n\")), mdx(\"p\", null, \"Then I edited my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.zshrc\"), \" file to include:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"function nodelog() {\\n    NODE_OPTIONS=\\\"$NODE_OPTIONS --require $HOME/.config/nodelog.js\\\" node $@\\n}\\n\\n\")), mdx(\"h2\", null, \"Running/Using\"), mdx(\"p\", null, \"Now I can write code like (filename is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dailyTemperatures.js\"), \"):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"var dailyTemperatures = function (temps) {\\n    const memo = {};\\n    const answer = [];\\n    for (let i = 1; i < temps.length; i++) {\\n        // log - temps[i], temps[i - 1], i\\netc...\\n\")), mdx(\"p\", null, \"I use my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nodelog\"), \" alias:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"nodelog dailyTemperatures.js\\n\")), mdx(\"p\", null, \"And in the console I see:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"temps[i]:  80   temps[i - 1]:  34   i:  1\\n\")), mdx(\"p\", null, \"And best of all, I no longer need to worry about removing any console.log statements if I am just hacking through a LeetCode problem anymore.\"));\n}\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1>The Problem and Solution?</h1><p>Ever forget one of these:\n<img src=\"/static/forgotten-consolelog.png\" alt=\"An image showing a console.log statement that was supposed to be removed from the submitted LeetCode test runner\"/>\nA console.log statement that needs to be removed before submitting from the LeetCode test runner.\nYes, I know we should all be good enough to not need to ever use console.log statements, or to even iterate for that matter but sometimes I find myself tired and working on a project and just want to double check my data structure is in the correct state.</p><p>The issue however, is that I find it very annoying to:</p><ul><li>Have to remove these console.log statements all the time when submitting to the LeetCode test runner</li><li>Sometimes I want to keep them around in case I want to come back and iterate on this data structure or algorithm later</li><li>It isn&#x27;t always clear right away if your submission passes but is incrediblys slow if you just forgot to remove a console.log or if your code is sub par</li></ul><p>Hence the creation of <code>nodelog</code>! A NodeJS preprocessor that will not only allow you to console.log anything that has a String representation but that uses comments to dictate what to log so that whenever the code is ran without the preprocessor, the log statements are ignored.</p><p>Behold:</p><p><img src=\"/static/nodelog720.mov.gif\" alt=\"An animated gif showing the usage of the NodeJS &quot;preprocessor&quot;\"/></p><p>And all this requires is a single Javascript file which is only ran whenever you use whichever alias you use to include this file. In this example, I use <code>nodelog</code> as my alias which usesa a NodeJS argument to require a Javascript file before running the actual code.</p><h1>PreProcessors</h1><p>So most languages have what are called preprocessors. This is a compilation step where your source code is taken and modified before it is actually compiled.</p><p>For exmaple, a C preprocessor is a tool that processes source code before the actual compilation begins. It handles directives that begin with #, such as #include to include files, #define to create macros, and #ifdef for conditional compilation. The preprocessor replaces macros (all those #define lines), includes the contents of header files, and conditionally compiles code, producing a modified source file that is then passed to the compiler.</p><p>In other languages, macros are usually great ways to re use code without needing a function and as a result inlinnig the code defined by the macro.</p><h1>NodeJS and Preprocessors</h1><p>NodeJS doesn&#x27;t have any sort of preprocessor step.\nIT does however have an option to run a file before execution. And with this you can do some things like maybe alias console.log to a function cl:</p><pre><code>global.cl = console.log\n</code></pre><p>But I was having issues where I would write some code for LeetCode and maybe leave in a few console.log calls which severely slows down execution time.</p><p>I also wanted a way that would amke it easier to log out different values without having to write so much code.</p><p>To do so I created my own NodejS &quot;PreProcessor&quot; which will add the ability for me to easily log out anything I want with a comment starting with:\n<code>//log - </code> followed by whatever statements I want logged.</p><p>This way, when I run locally, I can see the output of the logs, but when I submit to LeetCode or anywhere else for that matter, the log lines are just ignored.</p><p>I also created a shell/zsh alias so that this preprocessor is only used when I run <code>nodelog</code> instead of <code>node</code>. Just to be safe and not mess with my actual node setup.</p><h2>Setup:</h2><p>I created this file in <code>~/.config/nodelog.js</code> and added the following code:</p><pre><code class=\"language-javascript\">const fs = require(&quot;fs&quot;);\nconst vm = require(&quot;vm&quot;);\n\nconst BOLD = `\\\\x1b[1m`;\n\n// Basic Text Color Codes\nconst BLACK = `\\\\x1b[30m`;\nconst RED = `\\\\x1b[31m`;\nconst GREEN = `\\\\x1b[32m`;\nconst YELLOW = `\\\\x1b[33m`;\nconst BLUE = `\\\\x1b[34m`;\nconst MAGENTA = `\\\\x1b[35m`;\nconst CYAN = `\\\\x1b[36m`;\nconst WHITE = `\\\\x1b[37m`;\n\n// Bright Text Color Codes\nconst BRIGHT_BLACK = `\\\\x1b[90m`;\nconst BRIGHT_RED = `\\\\x1b[91m`;\nconst BRIGHT_GREEN = `\\\\x1b[92m`;\nconst BRIGHT_YELLOW = `\\\\x1b[93m`;\nconst BRIGHT_BLUE = `\\\\x1b[94m`;\nconst BRIGHT_MAGENTA = `\\\\x1b[95m`;\nconst BRIGHT_CYAN = `\\\\x1b[96m`;\nconst BRIGHT_WHITE = `\\\\x1b[97m`;\n\n// Reset Code\nconst RESET = `\\\\x1b[0m`;\n\nfunction preprocessAndRunJavaScript(inputFile) {\n  // Read the content of the input file\n  const fileContent = fs.readFileSync(inputFile, &quot;utf-8&quot;);\n\n  // Regular expression to match lines with the `// log -` pattern\n  const logRegex = /\\/\\/\\s*log\\s*-\\s*(.+)/g;\n\n  // Replace matched lines with the corresponding console.log statement\n  const processedContent = fileContent.replace(logRegex, (match, p1) =&gt; {\n    const variables = p1.split(&quot;,&quot;);\n\n    // Determine the maximum length of variable names for proper alignment\n    const maxLength = Math.max(...variables.map(v =&gt; v.trim().length));\n\n    const logStatement = variables\n      .map((v) =&gt; {\n        // Pad variable names to align the columns\n        const paddedVar = v.trim().padEnd(maxLength);\n        return `&quot;${BRIGHT_WHITE}${BOLD}${paddedVar}${RESET}: &quot;, ${v}, &quot;\\\\t&quot;`;\n      })\n      .join(&quot;, &quot;);\n\n    return `console.log(${logStatement});`;\n  });\n\n  // Create a new script from the processed content\n  const script = new vm.Script(processedContent);\n\n  // Run the script in the current context\n  script.runInThisContext();\n  process.exit(0);\n}\n\n// Get the file path from the command line arguments\nconst inputFile = process.argv[1];\n\nif (!inputFile) {\n  console.error(&quot;Please provide an input file&quot;);\n  process.exit(1);\n}\npreprocessAndRunJavaScript(inputFile);\n</code></pre><p>Then I edited my <code>~/.zshrc</code> file to include:</p><pre><code class=\"language-bash\">function nodelog() {\n    NODE_OPTIONS=&quot;$NODE_OPTIONS --require $HOME/.config/nodelog.js&quot; node $@\n}\n\n</code></pre><h2>Running/Using</h2><p>Now I can write code like (filename is <code>dailyTemperatures.js</code>):</p><pre><code class=\"language-javascript\">var dailyTemperatures = function (temps) {\n    const memo = {};\n    const answer = [];\n    for (let i = 1; i &lt; temps.length; i++) {\n        // log - temps[i], temps[i - 1], i\netc...\n</code></pre><p>I use my <code>nodelog</code> alias:</p><pre><code class=\"language-bash\">nodelog dailyTemperatures.js\n</code></pre><p>And in the console I see:</p><pre><code>temps[i]:  80   temps[i - 1]:  34   i:  1\n</code></pre><p>And best of all, I no longer need to worry about removing any console.log statements if I am just hacking through a LeetCode problem anymore.</p>","scope":{"slug":"node-logging-preprocessor","title":"A NodeJS “Preprocessor” Can Add Any Functionality Including Easy Logging","date":"2024-08-23","author":"bebrws","tags":["NodeJS","preprocessor","logging","extend","hack","customize"]}}},"__N_SSG":true}