{"pageProps":{"title":"15 Lines of Python and 1 Shortcut To Get ChatGPT Summaries of Anything","dateString":"2024-10-04","slug":"osx-shortcut-screenshot-to-text-chatgpt","description":"","tags":["Screenshots","OCR","ChatGPT"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/summarize.mov.gif\",\n    \"alt\": \"An animated gif shortcut in action\"\n  })), mdx(\"h1\", null, \"Taking Notes Quickly withOUT Local OCR and JUST ChatGPT\"), mdx(\"p\", null, \"ChatGPT's API is amazing. But it doesn't support uploading images.\\nOr not directly at least. \"), mdx(\"p\", null, \"You CAN base64 encode one though and send that along with your prompt.\"), mdx(\"p\", null, \"So while I am learning about AI/Neural Networks/Deep Learning/etc, ironically, I needed some LLM help to get good searchable notes.\"), mdx(\"p\", null, \"I was just taking screenshots of the videos I was watching and placing them in my Notion notes. But this sucks for a lot of reasons. Mainly I can't search for anything and they can be harder to read than what I can get ChatGPT to generate.\"), mdx(\"p\", null, \"So yes with the App you can go and take a screenshot and open the app and open the file and it's this whole process.\"), mdx(\"p\", null, \"But here is a no click, siri request away, automatic screenshot summarizer.\\nYou say \\\"Summarize Screen\\\" and select the parts of the screen you want capture and the script will put the ChatGPT summary into your clipboard and let you know when it's done.\\nI should probably remove say with a notification but I'll get to that if it bothers me.\"), mdx(\"p\", null, \"This is quick and dirty. So part 1.\"), mdx(\"h2\", null, \"Python Script\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"#!/usr/bin/env python3\\n\\nimport requests\\nimport os\\nimport base64\\nfrom pathlib import Path\\nimport subprocess\\n\\n\\ndef capture_screenshot(output_file=\\\"screenshot.png\\\"):\\n    subprocess.run([\\\"screencapture\\\", \\\"-s\\\", output_file])\\n    return output_file\\n\\n# Define the directory path\\nscreenshots_dir = Path(os.path.expanduser('~/Documents/Screenshots'))\\n\\nscreenshot_file = Path(os.path.join(screenshots_dir, \\\"scrnsht2md.png\\\"))\\n# print(\\\"file: \\\", screenshot_file)\\ncapture_screenshot(screenshot_file)\\n\\nb64_img = \\\"\\\"\\nwith open(screenshot_file, 'rb') as image_file:\\n    b64_img = base64.b64encode(image_file.read()).decode('utf-8')\\n\\n\\napi_key = os.environ['OPENAI_API_KEY']\\n\\nquestion = \\\"Provide a markdown version of of the provided image, no summary is necessary, just try to represent the text in the image with markdown as accurately as possible\\\"\\n\\n# This line is for providing base line instructions for any answer\\nRuleInstructions = \\\"You are an assistant that summarizes images and responds in markdown\\\"\\n\\nheaders = {\\n  \\\"Content-Type\\\": \\\"application/json\\\",\\n  \\\"Authorization\\\": f\\\"Bearer {api_key}\\\"\\n}\\n\\npayload = {\\n  \\\"model\\\": \\\"gpt-4o-mini\\\",\\n  \\\"messages\\\": [\\n    {\\\"role\\\": \\\"system\\\", \\\"content\\\": f\\\"{RuleInstructions}.\\\"},\\n    {\\n      \\\"role\\\": \\\"user\\\",\\n      \\\"content\\\": [\\n        {\\n          \\\"type\\\": \\\"text\\\",\\n          \\\"text\\\": f\\\"{question}\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"image_url\\\",\\n          \\\"image_url\\\": {\\n            \\\"url\\\": f\\\"data:image/jpeg;base64,{b64_img }\\\",\\n            \\\"detail\\\": \\\"auto\\\"\\n          }\\n        }\\n      ]\\n    }\\n  ],\\n  \\\"max_tokens\\\": 300\\n}\\n\\nresp = requests.post(\\\"https://api.openai.com/v1/chat/completions\\\", headers=headers, json=payload)\\n\\nresponse_json = resp.json()\\n\\nmessage_content = response_json['choices'][0]['message']['content']\\n\\nprint(message_content)\\n\\n\\ndef copy_to_clipboard(text):\\n    process = subprocess.Popen(\\n        'pbcopy', env={'LANG': 'en_US.UTF-8'}, stdin=subprocess.PIPE)\\n    process.communicate(text.encode('utf-8'))\\n    process.wait()  # Ensure the pbcopy process has completed\\n    subprocess.run(['say', 'done'])\\n\\ncopy_to_clipboard(message_content)\\n\")), mdx(\"p\", null, \"Place this in your home folder or preferably your local bin folder. Make it executable with chmod +x.\"), mdx(\"h2\", null, \"Create the Shortcut\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/shortcut.png\",\n    \"alt\": \"The shortcut\"\n  })), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.icloud.com/shortcuts/109129b1d48b47e38718b1b102a383d1\"\n  }, \"Which you can get here\")), mdx(\"p\", null, \"I'ts just a one action Shortcut with a shell script action. Default options. Command is:\"), mdx(\"p\", null, \"I have my python script symlinked to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$HOME/bin/ssmd\"), \"  \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"OPENAI_API_KEY=\\\"sk-YOURTOKEN\\\" /Users/your-name/bin/ssmd\\n\")), mdx(\"h2\", null, \"Customization\"), mdx(\"p\", null, \"Change the python script prompt and ask it to add further details or relevant information.\\nGet creative.\"));\n}\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><img src=\"/static/summarize.mov.gif\" alt=\"An animated gif shortcut in action\"/></p><div style=\"position:relative\"><span style=\"position:absolute;margin-left:-1.5em;font-weight:300;font-size:1.5rem;color:#9b9b9b\">#</span><h1 id=\"Taking%20Notes%20Quickly%20withOUT%20Local%20OCR%20and%20JUST%20ChatGPT\" class=\"jsx-2373991563\"><a href=\"#Taking%20Notes%20Quickly%20withOUT%20Local%20OCR%20and%20JUST%20ChatGPT\" class=\"jsx-2373991563\">Taking Notes Quickly withOUT Local OCR and JUST ChatGPT</a></h1></div><p>ChatGPT&#x27;s API is amazing. But it doesn&#x27;t support uploading images.\nOr not directly at least. </p><p>You CAN base64 encode one though and send that along with your prompt.</p><p>So while I am learning about AI/Neural Networks/Deep Learning/etc, ironically, I needed some LLM help to get good searchable notes.</p><p>I was just taking screenshots of the videos I was watching and placing them in my Notion notes. But this sucks for a lot of reasons. Mainly I can&#x27;t search for anything and they can be harder to read than what I can get ChatGPT to generate.</p><p>So yes with the App you can go and take a screenshot and open the app and open the file and it&#x27;s this whole process.</p><p>But here is a no click, siri request away, automatic screenshot summarizer.\nYou say &quot;Summarize Screen&quot; and select the parts of the screen you want capture and the script will put the ChatGPT summary into your clipboard and let you know when it&#x27;s done.\nI should probably remove say with a notification but I&#x27;ll get to that if it bothers me.</p><p>This is quick and dirty. So part 1.</p><div style=\"position:relative\"><span style=\"position:absolute;margin-left:-1.5em;font-weight:300;font-size:1.5rem;color:#9b9b9b\">#</span><h2 id=\"Python%20Script\" class=\"jsx-2373991563\"><a href=\"#Python%20Script\" class=\"jsx-2373991563\">Python Script</a></h2></div><pre><code class=\"language-python\">#!/usr/bin/env python3\n\nimport requests\nimport os\nimport base64\nfrom pathlib import Path\nimport subprocess\n\n\ndef capture_screenshot(output_file=&quot;screenshot.png&quot;):\n    subprocess.run([&quot;screencapture&quot;, &quot;-s&quot;, output_file])\n    return output_file\n\n# Define the directory path\nscreenshots_dir = Path(os.path.expanduser(&#x27;~/Documents/Screenshots&#x27;))\n\nscreenshot_file = Path(os.path.join(screenshots_dir, &quot;scrnsht2md.png&quot;))\n# print(&quot;file: &quot;, screenshot_file)\ncapture_screenshot(screenshot_file)\n\nb64_img = &quot;&quot;\nwith open(screenshot_file, &#x27;rb&#x27;) as image_file:\n    b64_img = base64.b64encode(image_file.read()).decode(&#x27;utf-8&#x27;)\n\n\napi_key = os.environ[&#x27;OPENAI_API_KEY&#x27;]\n\nquestion = &quot;Provide a markdown version of of the provided image, no summary is necessary, just try to represent the text in the image with markdown as accurately as possible&quot;\n\n# This line is for providing base line instructions for any answer\nRuleInstructions = &quot;You are an assistant that summarizes images and responds in markdown&quot;\n\nheaders = {\n  &quot;Content-Type&quot;: &quot;application/json&quot;,\n  &quot;Authorization&quot;: f&quot;Bearer {api_key}&quot;\n}\n\npayload = {\n  &quot;model&quot;: &quot;gpt-4o-mini&quot;,\n  &quot;messages&quot;: [\n    {&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: f&quot;{RuleInstructions}.&quot;},\n    {\n      &quot;role&quot;: &quot;user&quot;,\n      &quot;content&quot;: [\n        {\n          &quot;type&quot;: &quot;text&quot;,\n          &quot;text&quot;: f&quot;{question}&quot;\n        },\n        {\n          &quot;type&quot;: &quot;image_url&quot;,\n          &quot;image_url&quot;: {\n            &quot;url&quot;: f&quot;data:image/jpeg;base64,{b64_img }&quot;,\n            &quot;detail&quot;: &quot;auto&quot;\n          }\n        }\n      ]\n    }\n  ],\n  &quot;max_tokens&quot;: 300\n}\n\nresp = requests.post(&quot;https://api.openai.com/v1/chat/completions&quot;, headers=headers, json=payload)\n\nresponse_json = resp.json()\n\nmessage_content = response_json[&#x27;choices&#x27;][0][&#x27;message&#x27;][&#x27;content&#x27;]\n\nprint(message_content)\n\n\ndef copy_to_clipboard(text):\n    process = subprocess.Popen(\n        &#x27;pbcopy&#x27;, env={&#x27;LANG&#x27;: &#x27;en_US.UTF-8&#x27;}, stdin=subprocess.PIPE)\n    process.communicate(text.encode(&#x27;utf-8&#x27;))\n    process.wait()  # Ensure the pbcopy process has completed\n    subprocess.run([&#x27;say&#x27;, &#x27;done&#x27;])\n\ncopy_to_clipboard(message_content)\n</code></pre><p>Place this in your home folder or preferably your local bin folder. Make it executable with chmod +x.</p><div style=\"position:relative\"><span style=\"position:absolute;margin-left:-1.5em;font-weight:300;font-size:1.5rem;color:#9b9b9b\">#</span><h2 id=\"Create%20the%20Shortcut\" class=\"jsx-2373991563\"><a href=\"#Create%20the%20Shortcut\" class=\"jsx-2373991563\">Create the Shortcut</a></h2></div><p><img src=\"/static/shortcut.png\" alt=\"The shortcut\"/></p><p><a href=\"https://www.icloud.com/shortcuts/109129b1d48b47e38718b1b102a383d1\">Which you can get here</a></p><p>I&#x27;ts just a one action Shortcut with a shell script action. Default options. Command is:</p><p>I have my python script symlinked to <code>$HOME/bin/ssmd</code>  </p><pre><code class=\"language-bash\">OPENAI_API_KEY=&quot;sk-YOURTOKEN&quot; /Users/your-name/bin/ssmd\n</code></pre><div style=\"position:relative\"><span style=\"position:absolute;margin-left:-1.5em;font-weight:300;font-size:1.5rem;color:#9b9b9b\">#</span><h2 id=\"Customization\" class=\"jsx-2373991563\"><a href=\"#Customization\" class=\"jsx-2373991563\">Customization</a></h2></div><p>Change the python script prompt and ask it to add further details or relevant information.\nGet creative.</p>","scope":{"slug":"osx-shortcut-screenshot-to-text-chatgpt","title":"15 Lines of Python and 1 Shortcut To Get ChatGPT Summaries of Anything","date":"2024-10-04","author":"bebrws","tags":["Screenshots","OCR","ChatGPT"]}}},"__N_SSG":true}