{"pageProps":{"title":"Convert an HTML Style attribute string to a JSON Object for React","dateString":"2021-04-21","slug":"html-to-react-style","description":"","tags":["vscode"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"I had an SVG I wanted to place in my Javascript as a React Component\"), mdx(\"p\", null, \"To do this I was required to convert the Style string to a Javascript JSON Object.\"), mdx(\"p\", null, \"This is my solution. Simply add this to your .zshrc file and you at the command line you can run the function and convert from a Node shell.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"function htmlStyleStringToReactJSObject() {\\nnode -e '\\nvar ctx = require(\\\"repl\\\").start(\\\"$ \\\").context;\\n\\nctx.util = require(\\\"util\\\");\\n\\nctx.snakeCaseToCamelCase = str => {\\n  return str.split(\\\"-\\\").reduce((acc, cur, i) => { return i === 0 ? acc += cur : acc += cur[0].toUpperCase() + cur.slice(1); }, \\\"\\\");\\n};\\n\\nctx.styleStringToJSON = str => {\\n  return str.split(\\\";\\\").map(p => p.split(\\\":\\\")).filter(p => p.length == 2).reduce((acc, cur) => { return {...acc, [ctx.snakeCaseToCamelCase(cur[0])]: cur[1]} }, {});\\n};\\n\\nctx.jsonFromStyle = str => {\\n    // console.log(JSON.stringify(ctx.styleStringToJSON(str)));\\n    // return JSON.stringify(ctx.styleStringToJSON(str));\\n    console.log(\\\"JSON from style string:\\\\n\\\\n\\\"ctx.util.inspect(ctx.styleStringToJSON(str)));\\n}\\n\\nconsole.log(\\\"\\\\x1b[1m\\\\x1b[32m\\\", \\\"Call: jsonFromStyle(s: string)\\\\n\\\");\\n\\n'\\n}\\n# Example Usage\\n# jsonFromStyle(\\\"fill:none;stroke:black;stroke-width:27.08px;\\\")\\n\\n\")), mdx(\"p\", null, \"After putting that in your .zshrc or copy pasting it into your terminal you can just run:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"htmlStyleStringToReactJSObject\\n\")), mdx(\"p\", null, \"Then you will have a prompt where you can output JSON objects.\"), mdx(\"h2\", null, \"Node Is Powerful And Fast\"), mdx(\"p\", null, \"I really was just posting this as a reminder to try do more shell style or system and utility scripting with Node.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1>I had an SVG I wanted to place in my Javascript as a React Component</h1><p>To do this I was required to convert the Style string to a Javascript JSON Object.</p><p>This is my solution. Simply add this to your .zshrc file and you at the command line you can run the function and convert from a Node shell.</p><pre><code>function htmlStyleStringToReactJSObject() {\nnode -e &#x27;\nvar ctx = require(&quot;repl&quot;).start(&quot;$ &quot;).context;\n\nctx.util = require(&quot;util&quot;);\n\nctx.snakeCaseToCamelCase = str =&gt; {\n  return str.split(&quot;-&quot;).reduce((acc, cur, i) =&gt; { return i === 0 ? acc += cur : acc += cur[0].toUpperCase() + cur.slice(1); }, &quot;&quot;);\n};\n\nctx.styleStringToJSON = str =&gt; {\n  return str.split(&quot;;&quot;).map(p =&gt; p.split(&quot;:&quot;)).filter(p =&gt; p.length == 2).reduce((acc, cur) =&gt; { return {...acc, [ctx.snakeCaseToCamelCase(cur[0])]: cur[1]} }, {});\n};\n\nctx.jsonFromStyle = str =&gt; {\n    // console.log(JSON.stringify(ctx.styleStringToJSON(str)));\n    // return JSON.stringify(ctx.styleStringToJSON(str));\n    console.log(&quot;JSON from style string:\\n\\n&quot;ctx.util.inspect(ctx.styleStringToJSON(str)));\n}\n\nconsole.log(&quot;\\x1b[1m\\x1b[32m&quot;, &quot;Call: jsonFromStyle(s: string)\\n&quot;);\n\n&#x27;\n}\n# Example Usage\n# jsonFromStyle(&quot;fill:none;stroke:black;stroke-width:27.08px;&quot;)\n\n</code></pre><p>After putting that in your .zshrc or copy pasting it into your terminal you can just run:</p><pre><code>htmlStyleStringToReactJSObject\n</code></pre><p>Then you will have a prompt where you can output JSON objects.</p><h2>Node Is Powerful And Fast</h2><p>I really was just posting this as a reminder to try do more shell style or system and utility scripting with Node.</p>","scope":{"slug":"html-to-react-style","title":"Convert an HTML Style attribute string to a JSON Object for React","date":"2021-04-21","author":"bebrws","tags":["vscode"]}}},"__N_SSG":true}