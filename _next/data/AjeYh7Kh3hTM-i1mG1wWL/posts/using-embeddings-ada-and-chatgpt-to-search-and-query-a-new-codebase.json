{"pageProps":{"title":"Search (ada) and Query (gpt-3.5-turbo) Your Codebases Using OpenAI's Embeddings and ChatGPT","dateString":"2023-03-01","slug":"using-embeddings-ada-and-chatgpt-to-search-and-query-a-new-codebase","description":"","tags":["OpenAI","ChatGPT","Whisper","AI","Machine Learning"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Search Any Number Of Files Locally And Chat With OpenAI About Them (Code Completion For Your Codebase!)\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/searchgpt.gif\",\n    \"alt\": \"Running GPT locally on a M1 Macbook\"\n  })), mdx(\"h2\", null, \"Example of it working better than ChatGPT alone\"), mdx(\"p\", null, \"So the ChatCompletion API that openai has is so new that to use it you must build and install the openai-python repo from source.\\nI was pretty sure ChatGPT wouldn't know about this yet and when asking at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://chat.openai.com/chat\"\n  }, \"https://chat.openai.com/chat\"), \" I found I was right:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/chatgpt-completion-ex.png\",\n    \"alt\": \"ChatGPT doesn't know about this yet\"\n  })), mdx(\"p\", null, \"But when using the tool I have written here, searching through the openai-python codebase (creating embeddings for all python code in this repo and finding the best ones to include in the ChatCompletion/ChatGPT prompt) it works great:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/chatcompletionworks.png\",\n    \"alt\": \"With embeddings we can get information on this\"\n  })), mdx(\"h2\", null, \"Where is this?\"), mdx(\"p\", null, \"The repo is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/bebrws/openai-search-codebase-and-chat-about-it\"\n  }, \"here\"), \".\"), mdx(\"h2\", null, \"What is this?\"), mdx(\"p\", null, \"I love ChatGPT. But I really wanted to see if it could be used to search through and provide useful answers about the codebases I work with day to day.\\nThis script is still pretty rough right now but I wanted to push it up in case anyone else has been trying to do this.\\nI will clean this up when I get time.\"), mdx(\"p\", null, \"Tree sitter is used to parse through whatever language and then it sends off parts of the AST as embeddings to OpenAI.\\nThen the embeddings are searched to find the most similar ones to your query using text-embedding-ada-002 and finally the top related code that is found with text-embedding-ada-002 is then used in a prompt to ChatGPT (gpt-3.5-turbo).\"), mdx(\"p\", null, \"I couldn't find any good working examples of this, especially with the language support that I have (tree-sitter will support any language that ChatGPT does).\"), mdx(\"p\", null, \"Right now it is set to search just through GoLang code. But just change the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"current_language \"), \"\\nvariable to whatever language you want to search/query.\"), mdx(\"p\", null, \"There is a lot of code I am still refactoring and cleaning up. But it works great! So have fun.\"), mdx(\"h2\", null, \"TODO:\"), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  }), \" \", \"Combine embeddings of the same node_type that are adjacent to each other\"), mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  }), \" \", \"Use num_tokens_from_string to make sure my embeddings/query are the right size\")), mdx(\"h2\", null, \"Setup tree sitter parsers\"), mdx(\"p\", null, \"I have included the build folder so you can skip the instructions from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/tree-sitter/py-tree-sitter\"\n  }, \"https://github.com/tree-sitter/py-tree-sitter\")), mdx(\"p\", null, \"But you need to clone the following repos:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git clone https://github.com/tree-sitter/tree-sitter-go\\ngit clone https://github.com/tree-sitter/tree-sitter-javascript\\ngit clone https://github.com/tree-sitter/tree-sitter-python\\n\")), mdx(\"p\", null, \"Then run the following code in python:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"from tree_sitter import Language, Parser\\n\\nLanguage.build_library(\\n    # Store the library in the `build` directory\\n    'build/my-languages.so',\\n\\n    # Include one or more languages\\n    [\\n        'tree-sitter-go',\\n        'tree-sitter-javascript',\\n        'tree-sitter-python'\\n    ]\\n)\\n\")), mdx(\"p\", null, \"to rebuild your own or add new languages.\"), mdx(\"h2\", null, \"Install required packages/libraries\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"python3 -m pip install matplotlib\\npython3 -m pip install plotly\\npython3 -m pip install scipy\\npython3 -m pip install sklearn\\npython3 -m pip install pandas\\npython3 -m pip install tree_sitter\\npython3 -m pip install tiktoken\\n\")), mdx(\"p\", null, \"And you must install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"openai-python\"), \" from the repo so you can use the new ChatCompletion API.\"), mdx(\"h2\", null, \"Run it\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"python3 searchandchat.py\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1>Search Any Number Of Files Locally And Chat With OpenAI About Them (Code Completion For Your Codebase!)</h1><p><img src=\"/static/searchgpt.gif\" alt=\"Running GPT locally on a M1 Macbook\"/></p><h2>Example of it working better than ChatGPT alone</h2><p>So the ChatCompletion API that openai has is so new that to use it you must build and install the openai-python repo from source.\nI was pretty sure ChatGPT wouldn&#x27;t know about this yet and when asking at <a href=\"https://chat.openai.com/chat\">https://chat.openai.com/chat</a> I found I was right:</p><p><img src=\"/static/chatgpt-completion-ex.png\" alt=\"ChatGPT doesn&#x27;t know about this yet\"/></p><p>But when using the tool I have written here, searching through the openai-python codebase (creating embeddings for all python code in this repo and finding the best ones to include in the ChatCompletion/ChatGPT prompt) it works great:</p><p><img src=\"/static/chatcompletionworks.png\" alt=\"With embeddings we can get information on this\"/></p><h2>Where is this?</h2><p>The repo is <a href=\"https://github.com/bebrws/openai-search-codebase-and-chat-about-it\">here</a>.</p><h2>What is this?</h2><p>I love ChatGPT. But I really wanted to see if it could be used to search through and provide useful answers about the codebases I work with day to day.\nThis script is still pretty rough right now but I wanted to push it up in case anyone else has been trying to do this.\nI will clean this up when I get time.</p><p>Tree sitter is used to parse through whatever language and then it sends off parts of the AST as embeddings to OpenAI.\nThen the embeddings are searched to find the most similar ones to your query using text-embedding-ada-002 and finally the top related code that is found with text-embedding-ada-002 is then used in a prompt to ChatGPT (gpt-3.5-turbo).</p><p>I couldn&#x27;t find any good working examples of this, especially with the language support that I have (tree-sitter will support any language that ChatGPT does).</p><p>Right now it is set to search just through GoLang code. But just change the\n<code>current_language </code>\nvariable to whatever language you want to search/query.</p><p>There is a lot of code I am still refactoring and cleaning up. But it works great! So have fun.</p><h2>TODO:</h2><ul class=\"contains-task-list\"><li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- -->Combine embeddings of the same node_type that are adjacent to each other</li><li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- -->Use num_tokens_from_string to make sure my embeddings/query are the right size</li></ul><h2>Setup tree sitter parsers</h2><p>I have included the build folder so you can skip the instructions from <a href=\"https://github.com/tree-sitter/py-tree-sitter\">https://github.com/tree-sitter/py-tree-sitter</a></p><p>But you need to clone the following repos:</p><pre><code>git clone https://github.com/tree-sitter/tree-sitter-go\ngit clone https://github.com/tree-sitter/tree-sitter-javascript\ngit clone https://github.com/tree-sitter/tree-sitter-python\n</code></pre><p>Then run the following code in python:</p><pre><code>from tree_sitter import Language, Parser\n\nLanguage.build_library(\n    # Store the library in the `build` directory\n    &#x27;build/my-languages.so&#x27;,\n\n    # Include one or more languages\n    [\n        &#x27;tree-sitter-go&#x27;,\n        &#x27;tree-sitter-javascript&#x27;,\n        &#x27;tree-sitter-python&#x27;\n    ]\n)\n</code></pre><p>to rebuild your own or add new languages.</p><h2>Install required packages/libraries</h2><pre><code>python3 -m pip install matplotlib\npython3 -m pip install plotly\npython3 -m pip install scipy\npython3 -m pip install sklearn\npython3 -m pip install pandas\npython3 -m pip install tree_sitter\npython3 -m pip install tiktoken\n</code></pre><p>And you must install <code>openai-python</code> from the repo so you can use the new ChatCompletion API.</p><h2>Run it</h2><pre><code>python3 searchandchat.py\n</code></pre>","scope":{"slug":"using-embeddings-ada-and-chatgpt-to-search-and-query-a-new-codebase","title":"Search (ada) and Query (gpt-3.5-turbo) Your Codebases Using OpenAI's Embeddings and ChatGPT","date":"2023-03-01","author":"bebrws","tags":["OpenAI","ChatGPT","Whisper","AI","Machine Learning"]}}},"__N_SSG":true}