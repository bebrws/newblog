{"pageProps":{"title":"Scripting Fake UITouch Events Using Frida and Lyft Hammer","dateString":"2023-05-12","slug":"ios-send-fake-simulated-uitouch-events","description":"","tags":["Reverse engineering","iOS","aws","cognito","frida","lldb","osx","Siri","shortcuts","UITouch","SwiftUI","Deep linking","IOS URLScheme"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Simulating or Sending Fake UITouch Events\"), mdx(\"p\", null, \"I was having a ton of trouble reverse engineering this Swift app to get it to send a request to lock and unlock my door.\"), mdx(\"p\", null, \"Long story short, it had some code to refresh the JWT it had in memory that I couldn't figure out how to trigger. And the JWT I could find was always old.\"), mdx(\"p\", null, \"So I had the crazy idea of why not just modify the app so that when it opens, it waits a little bit for the app to load and then sends a fake touch event to the screen to press the button that triggered the request to lock/unlock the door.\"), mdx(\"p\", null, \"Now there are a number of example's of how to do this. One by the great Frida creator himself.\"), mdx(\"p\", null, \"If you just want a super nice and concise implementation of how this can be done checkout his \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/nowsecure/frida-uikit\"\n  }, \"repo here\")), mdx(\"p\", null, \"However, before I found this I had only found Lyft's \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/lyft/Hammer\"\n  }, \"Hammer repo\")), mdx(\"p\", null, \"Hammer is a little more complicated but has some useful functionality like the ability to wait for the touch event to be handled. So if you wanted to reliably script a chain of touch events you would probably want to use Hammer.\"), mdx(\"p\", null, \"What ended up being the big issue here for me was the use of the XCTest framework.\"), mdx(\"p\", null, \"I am pretty sure the XCTest framework is NOT supposed to be EVER deployed to an iOS app on your phone. Just for testing in simulator. Although I am not sure about this.\"), mdx(\"p\", null, \"What I can say is that it is a dynamically linked library that has a ton of dependencies that your phone won't have. So if you do build a dylib from this Hammer repo. Inject the dylib into the app and then try to use it from Frida like I did. You won't be able to becuase XCTest has soooo many dependencies.\"), mdx(\"p\", null, \"XCTest depends on XCTestCore which I think depended on XCTestSupport etc etc... There just a huge tree of dependencies basically coming off of XCTest.\"), mdx(\"p\", null, \"NOTE: I did try just commenting out all the XCTest related code so I could remove the XCTest dependency. Neutering the wait functionality and this did work. I was able to create a dylib without any required dependencies where I could still send fake touch events.\"), mdx(\"p\", null, \"I wanted that \\\"wait for touch event to be registered\\\" functionality though and went about trying to get all the dependencies in place.\"), mdx(\"p\", null, \"This lead me to writing a tool that looks at a dynamically linked library and locates all of its dependencies from your machine, copies them into a folder and updates the rpath so they can find each other.\"), mdx(\"p\", null, \"Ironically, after I did all this work I found there were some repos out there already doing similar, if not the same thing... Frustrating I didn't find this before.\"), mdx(\"p\", null, \"This is all documented here and I would checkout \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/bebrws/fixDynamicLibPaths\"\n  }, \"the README\"), \" if you are interested in a tool to help get a dependcy tree built when you have a depency like XCTest you want to inject into an iOS app.\"), mdx(\"p\", null, \"Since Hammer is a Swift app though I had to create a whole Swift project with a bridging header to Objective C so that I could create an Objective C class with class methods I could easily call from Frida. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/bebrws/dylibForSendingKeyboardTouchEvents/blob/main/HandleURLScheme/BBEvent.h\"\n  }, \"This can be found here\"), \". Note that is a mess and has left over code form when I was trying to swizzle.\"), mdx(\"p\", null, \"After injecting the dylib with my wrapper around Hammer and all of its XCTest deps I was able to script touch events using Frida with:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"ObjC.classes[\\\"HandleURLScheme.BBEvent\\\"][\\\"+ sendTouchWindowAtX:y:\\\"](0,0)\\n\\n\")), mdx(\"p\", null, \"Note that 0,0 is the center of the screen\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1>Simulating or Sending Fake UITouch Events</h1><p>I was having a ton of trouble reverse engineering this Swift app to get it to send a request to lock and unlock my door.</p><p>Long story short, it had some code to refresh the JWT it had in memory that I couldn&#x27;t figure out how to trigger. And the JWT I could find was always old.</p><p>So I had the crazy idea of why not just modify the app so that when it opens, it waits a little bit for the app to load and then sends a fake touch event to the screen to press the button that triggered the request to lock/unlock the door.</p><p>Now there are a number of example&#x27;s of how to do this. One by the great Frida creator himself.</p><p>If you just want a super nice and concise implementation of how this can be done checkout his <a href=\"https://github.com/nowsecure/frida-uikit\">repo here</a></p><p>However, before I found this I had only found Lyft&#x27;s <a href=\"https://github.com/lyft/Hammer\">Hammer repo</a></p><p>Hammer is a little more complicated but has some useful functionality like the ability to wait for the touch event to be handled. So if you wanted to reliably script a chain of touch events you would probably want to use Hammer.</p><p>What ended up being the big issue here for me was the use of the XCTest framework.</p><p>I am pretty sure the XCTest framework is NOT supposed to be EVER deployed to an iOS app on your phone. Just for testing in simulator. Although I am not sure about this.</p><p>What I can say is that it is a dynamically linked library that has a ton of dependencies that your phone won&#x27;t have. So if you do build a dylib from this Hammer repo. Inject the dylib into the app and then try to use it from Frida like I did. You won&#x27;t be able to becuase XCTest has soooo many dependencies.</p><p>XCTest depends on XCTestCore which I think depended on XCTestSupport etc etc... There just a huge tree of dependencies basically coming off of XCTest.</p><p>NOTE: I did try just commenting out all the XCTest related code so I could remove the XCTest dependency. Neutering the wait functionality and this did work. I was able to create a dylib without any required dependencies where I could still send fake touch events.</p><p>I wanted that &quot;wait for touch event to be registered&quot; functionality though and went about trying to get all the dependencies in place.</p><p>This lead me to writing a tool that looks at a dynamically linked library and locates all of its dependencies from your machine, copies them into a folder and updates the rpath so they can find each other.</p><p>Ironically, after I did all this work I found there were some repos out there already doing similar, if not the same thing... Frustrating I didn&#x27;t find this before.</p><p>This is all documented here and I would checkout <a href=\"https://github.com/bebrws/fixDynamicLibPaths\">the README</a> if you are interested in a tool to help get a dependcy tree built when you have a depency like XCTest you want to inject into an iOS app.</p><p>Since Hammer is a Swift app though I had to create a whole Swift project with a bridging header to Objective C so that I could create an Objective C class with class methods I could easily call from Frida. <a href=\"https://github.com/bebrws/dylibForSendingKeyboardTouchEvents/blob/main/HandleURLScheme/BBEvent.h\">This can be found here</a>. Note that is a mess and has left over code form when I was trying to swizzle.</p><p>After injecting the dylib with my wrapper around Hammer and all of its XCTest deps I was able to script touch events using Frida with:</p><pre><code>ObjC.classes[&quot;HandleURLScheme.BBEvent&quot;][&quot;+ sendTouchWindowAtX:y:&quot;](0,0)\n\n</code></pre><p>Note that 0,0 is the center of the screen</p>","scope":{"slug":"ios-send-fake-simulated-uitouch-events","title":"Scripting Fake UITouch Events Using Frida and Lyft Hammer","date":"2023-05-12","author":"bebrws","tags":["Reverse engineering","iOS","aws","cognito","frida","lldb","osx","Siri","shortcuts","UITouch","SwiftUI","Deep linking","IOS URLScheme"]}}},"__N_SSG":true}