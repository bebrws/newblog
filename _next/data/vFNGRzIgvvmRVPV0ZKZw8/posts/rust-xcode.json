{"pageProps":{"title":"Debugging and working on Rust in XCode - Debug with LLDB using the XCode interface","dateString":"2020-12-30","slug":"rust-xcode","description":"","tags":["rust"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Setup\"), mdx(\"p\", null, \"To get Rust in XCode working you just need to go and clone this repo:\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/bebrws/rust-xcode-plugin\"\n  }, \"https://github.com/bebrws/rust-xcode-plugin\")), mdx(\"p\", null, \"I have an install script I created for myself as well:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git clone https://github.com/bebrws/rust-xcode-plugin.git\\ncd rust-xcode-plugin\\n./install.sh\\n\")), mdx(\"p\", null, \"Afterwords close and open XCode.\"), mdx(\"p\", null, \"If later you notice that you cannot set breakpoints then you will need to add your XCode UUID to the plist file.\"), mdx(\"p\", null, \"Follow the directions in the README. You just have to run the command they provide and add it to the plist.\"), mdx(\"h1\", null, \"Creating XCode Projects For Yur Rust Projects\"), mdx(\"p\", null, \"Be sure to check out the amazing project:\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://crates.io/crates/cargo-xcode/1.1.1\"\n  }, \"https://crates.io/crates/cargo-xcode/1.1.1\")), mdx(\"p\", null, \"To use run:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"https://crates.io/crates/cargo-xcode/1.1.1\\n\")), mdx(\"p\", null, \"and from your Rust project root run:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"cargo-xcode\\n\")), mdx(\"p\", null, \"You now have an xcodeproj file with your XCode project!\"), mdx(\"p\", null, \"Open this and if you have the Rust plugin installed correctly from above you will be ready to build and debug your rust project, using the LLDB front end provided by XCode. Which IMO can be kind of nice. Especially if your running into issues with Rust VSCode debugging.\"), mdx(\"p\", null, \"Although I did write a post about setting this up as well and it has been working great for me too.\"), mdx(\"p\", null, \"You will most likely need to make sure your projevt has similar settings for the \\\"Scheme\\\". I took screen shots and list them below.\"), mdx(\"h3\", null, \"For Mac OSX Only Right Now\"), mdx(\"h3\", null, \"For iOS\"), mdx(\"p\", null, \"Checkout the rust-bitcode repo\"), mdx(\"p\", null, \"Configuaration that worked for me in XCode 12.3\"), mdx(\"p\", null, \"Goto\"), mdx(\"p\", null, \"Product -> Scheme -> Edit Scheme\"), mdx(\"p\", null, \"Then under Run:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/xcode-scheme-info.png\",\n    \"alt\": \"XCode Scheme Settings Info\"\n  })), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/xcode-scheme-options.png\",\n    \"alt\": \"XCode Scheme Settings Info\"\n  })), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/xcode-scheme-arguments.png\",\n    \"alt\": \"XCode Scheme Settings Info\"\n  })), mdx(\"p\", null, \"If you are running into an error regarding the deployment target you just need to bump the deployment target here up to a recent version\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/xcode-deployment-target.png\",\n    \"alt\": \"XCode Scheme Settings Info\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h2>Setup</h2><p>To get Rust in XCode working you just need to go and clone this repo:</p><p><a href=\"https://github.com/bebrws/rust-xcode-plugin\">https://github.com/bebrws/rust-xcode-plugin</a></p><p>I have an install script I created for myself as well:</p><pre><code>git clone https://github.com/bebrws/rust-xcode-plugin.git\ncd rust-xcode-plugin\n./install.sh\n</code></pre><p>Afterwords close and open XCode.</p><p>If later you notice that you cannot set breakpoints then you will need to add your XCode UUID to the plist file.</p><p>Follow the directions in the README. You just have to run the command they provide and add it to the plist.</p><h1>Creating XCode Projects For Yur Rust Projects</h1><p>Be sure to check out the amazing project:</p><p><a href=\"https://crates.io/crates/cargo-xcode/1.1.1\">https://crates.io/crates/cargo-xcode/1.1.1</a></p><p>To use run:</p><pre><code>https://crates.io/crates/cargo-xcode/1.1.1\n</code></pre><p>and from your Rust project root run:</p><pre><code>cargo-xcode\n</code></pre><p>You now have an xcodeproj file with your XCode project!</p><p>Open this and if you have the Rust plugin installed correctly from above you will be ready to build and debug your rust project, using the LLDB front end provided by XCode. Which IMO can be kind of nice. Especially if your running into issues with Rust VSCode debugging.</p><p>Although I did write a post about setting this up as well and it has been working great for me too.</p><p>You will most likely need to make sure your projevt has similar settings for the &quot;Scheme&quot;. I took screen shots and list them below.</p><h3>For Mac OSX Only Right Now</h3><h3>For iOS</h3><p>Checkout the rust-bitcode repo</p><p>Configuaration that worked for me in XCode 12.3</p><p>Goto</p><p>Product -&gt; Scheme -&gt; Edit Scheme</p><p>Then under Run:</p><p><img src=\"/static/xcode-scheme-info.png\" alt=\"XCode Scheme Settings Info\"/></p><p><img src=\"/static/xcode-scheme-options.png\" alt=\"XCode Scheme Settings Info\"/></p><p><img src=\"/static/xcode-scheme-arguments.png\" alt=\"XCode Scheme Settings Info\"/></p><p>If you are running into an error regarding the deployment target you just need to bump the deployment target here up to a recent version</p><p><img src=\"/static/xcode-deployment-target.png\" alt=\"XCode Scheme Settings Info\"/></p>","scope":{"slug":"rust-xcode","title":"Debugging and working on Rust in XCode - Debug with LLDB using the XCode interface","date":"2020-12-30","author":"bebrws","tags":["rust"]}}},"__N_SSG":true}