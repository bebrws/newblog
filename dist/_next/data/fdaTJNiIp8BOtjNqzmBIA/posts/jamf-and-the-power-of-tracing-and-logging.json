{"pageProps":{"title":"JAMF and the Power of Tracing and Logging","dateString":"2023-02-02","slug":"jamf-and-the-power-of-tracing-and-logging","description":"","tags":["Tracing","OSX","Debugging","Logging","Reverse Engineering","JAMF"],"author":"bebrws","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Pressure To Get Work Done, Distrust, (MDM) Barriers, and the Power of Tracing and Logging\"), mdx(\"h2\", null, \"The Hypothetically Frustrating World of JAMF MDM\"), mdx(\"p\", null, \"If I was to hypothetically have at one point worked at a company that used \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JamF Self Service Desk\"), \" to manage their Macs, I believe all my hypothetically co-workers agreed or would agree that this was pretty annoying, sometimes frustrating, and worst of all a huge time sink.\"), mdx(\"p\", null, \"At this hypothetical company they did not want to trust users with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"sudo\"), \" access. Which I can understand and do not want to waste my typing on the pros and cons of.\"), mdx(\"p\", null, \"The unfortunate fact of the matter is that sudo, even with, for example, a properly installed package manager writing to a user's directory was just causing frustration and loss of productivity. This hypothetical company did trust some user's enough to grant them sudo access for a short period of time however using a JamF \\\"app\\\" (I am not sure what they call the scripts they have in the Self Service Desk and don't want to look it up). Now even with this trusts issues occurred in our hypothetical world all the time. JamF Self Service Desk is incredibly buggy and \\\"apps\\\" would just disappear at random.\"), mdx(\"p\", null, \"Hours would then be spent waiting for the sudo access app to re appear so that an engineer could continue working on his laptop. While waiting he might be forced to interrupt or ask for the help of another team member.\"), mdx(\"h2\", null, \"The Solution\"), mdx(\"p\", null, \"Hypothetically, being a curious person, I would have noticed that both in JamF and in Console.app I could see messaging and logs saying that JamF was running some script every time I requested and received sudo access. This would have been incredibly enticing.\"), mdx(\"p\", null, \"Next, a decision  would need to be made between the huge number of tools that could be used to get to the next step, finding the sudo access script.\"), mdx(\"h2\", null, \"The Tools\"), mdx(\"p\", null, \"Now normally I would just love to use dtrace and trace all system calls on all running JamF processes. dtrace is amazing but unfortunately requires that SIP is disabled. Hypothetically this would have been a step too far for me to take against the security that some well meaning person had put in place.\"), mdx(\"p\", null, \"Instead I would have hypothetically opted toward tooling that does not require any security features to be disabled. I would have hypothetically considered the following tools:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/kastiglione/knox\"\n  }, \"knox\"), \" - open source\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://newosxbook.com/tools/supraudit.html\"\n  }, \"supraudit\"), \" - not open source BUT written by Jonathon Levin so... it's fine?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://www.newosxbook.com/src.jl?tree=listings&file=3-filemon.c\"\n  }, \"filemon\"), \" - open source and written by Levin \")), mdx(\"p\", null, \"etc etc... the list goes on and on. I think you can probably just use the OSX Instruments.app tooling to do this as well but haven't had a chance to use it.\"), mdx(\"p\", null, \"The easiest and most trustworthy solution if you don't want to compile your own binary may just be:\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://objective-see.org/products/utilities.html#FileMonitor\"\n  }, \"File Monitor\"), \" from objective-see (trustworthy security source).\"), mdx(\"p\", null, \"Personally, I think the most powerful and interesting tool that could be used in this situation (once sudo access is granted) is knox which opens and configures /dev/auditpipe which will stream an incredibly detailed audit log of system events.\"), mdx(\"h2\", null, \"The Process\"), mdx(\"p\", null, \"Hypothetically if we wanted to learn more we would want to see what JamF is doing to give us sudo access right? Well we know it is running some script. But how and where is this script? Wouldn't it be nice if this script was a file that we find? \"), mdx(\"p\", null, \"Well using one of the File Monitor/syscall tracing/audit logging/etc tools we could hypothetically see that JamF is running a script which it downloads to a temporary folder, runs, then deletes quickly. All of the tools I listed above (and more) would give enough information to easily figure this out.\"), mdx(\"p\", null, \"So in this hypothetical situation you could do something like ask JamF for sudo access, (once you already have sudo if you need to use tooling that requires it) then you run a script you wrote that repeatedly quickly searches the tmp directory for the script in question and copies it to your home directory.\"), mdx(\"h2\", null, \"The Solution\"), mdx(\"p\", null, \"Hypotheticall this script would have just used the dseditgroup tool to temporarily add the user to the admin group, delay, and then remove them from that group. Now if you have root/sudo and you can edit this script which also has the required permissions to use the dseditgroup tool to make these changes to your user's gropu then you could just remove the part that removes your user from the admin group.\"), mdx(\"h2\", null, \"My Opinion on MDM\"), mdx(\"p\", null, \"I get it, there are so many good reasons for MDM. But wow, it is such a time suck and productivity killer sometimes. Not to mention resource hog and destroyer of system settings at time. I could go on and on. It would be great if companies could just find an acceptable level or risk that still allows their employees to at least have root access on their dev machines.\"), mdx(\"h2\", null, \"Why Write This?\"), mdx(\"p\", null, \"Because I think all engineers should have lower level knowledge of how the operating systems they develop on and deploy to work. And with this knowledge comes the ability to quickly debug issues, write more secure code, and generally be more productive.\"), mdx(\"p\", null, \"And maybe this post might help instill some interest in topics like syscalls, auditing, and logging in general.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1>Pressure To Get Work Done, Distrust, (MDM) Barriers, and the Power of Tracing and Logging</h1><h2>The Hypothetically Frustrating World of JAMF MDM</h2><p>If I was to hypothetically have at one point worked at a company that used <em>JamF Self Service Desk</em> to manage their Macs, I believe all my hypothetically co-workers agreed or would agree that this was pretty annoying, sometimes frustrating, and worst of all a huge time sink.</p><p>At this hypothetical company they did not want to trust users with <em>sudo</em> access. Which I can understand and do not want to waste my typing on the pros and cons of.</p><p>The unfortunate fact of the matter is that sudo, even with, for example, a properly installed package manager writing to a user&#x27;s directory was just causing frustration and loss of productivity. This hypothetical company did trust some user&#x27;s enough to grant them sudo access for a short period of time however using a JamF &quot;app&quot; (I am not sure what they call the scripts they have in the Self Service Desk and don&#x27;t want to look it up). Now even with this trusts issues occurred in our hypothetical world all the time. JamF Self Service Desk is incredibly buggy and &quot;apps&quot; would just disappear at random.</p><p>Hours would then be spent waiting for the sudo access app to re appear so that an engineer could continue working on his laptop. While waiting he might be forced to interrupt or ask for the help of another team member.</p><h2>The Solution</h2><p>Hypothetically, being a curious person, I would have noticed that both in JamF and in Console.app I could see messaging and logs saying that JamF was running some script every time I requested and received sudo access. This would have been incredibly enticing.</p><p>Next, a decision  would need to be made between the huge number of tools that could be used to get to the next step, finding the sudo access script.</p><h2>The Tools</h2><p>Now normally I would just love to use dtrace and trace all system calls on all running JamF processes. dtrace is amazing but unfortunately requires that SIP is disabled. Hypothetically this would have been a step too far for me to take against the security that some well meaning person had put in place.</p><p>Instead I would have hypothetically opted toward tooling that does not require any security features to be disabled. I would have hypothetically considered the following tools:</p><ul><li><a href=\"https://github.com/kastiglione/knox\">knox</a> - open source</li><li><a href=\"http://newosxbook.com/tools/supraudit.html\">supraudit</a> - not open source BUT written by Jonathon Levin so... it&#x27;s fine?</li><li><a href=\"http://www.newosxbook.com/src.jl?tree=listings&amp;file=3-filemon.c\">filemon</a> - open source and written by Levin </li></ul><p>etc etc... the list goes on and on. I think you can probably just use the OSX Instruments.app tooling to do this as well but haven&#x27;t had a chance to use it.</p><p>The easiest and most trustworthy solution if you don&#x27;t want to compile your own binary may just be:\n<a href=\"https://objective-see.org/products/utilities.html#FileMonitor\">File Monitor</a> from objective-see (trustworthy security source).</p><p>Personally, I think the most powerful and interesting tool that could be used in this situation (once sudo access is granted) is knox which opens and configures /dev/auditpipe which will stream an incredibly detailed audit log of system events.</p><h2>The Process</h2><p>Hypothetically if we wanted to learn more we would want to see what JamF is doing to give us sudo access right? Well we know it is running some script. But how and where is this script? Wouldn&#x27;t it be nice if this script was a file that we find? </p><p>Well using one of the File Monitor/syscall tracing/audit logging/etc tools we could hypothetically see that JamF is running a script which it downloads to a temporary folder, runs, then deletes quickly. All of the tools I listed above (and more) would give enough information to easily figure this out.</p><p>So in this hypothetical situation you could do something like ask JamF for sudo access, (once you already have sudo if you need to use tooling that requires it) then you run a script you wrote that repeatedly quickly searches the tmp directory for the script in question and copies it to your home directory.</p><h2>The Solution</h2><p>Hypotheticall this script would have just used the dseditgroup tool to temporarily add the user to the admin group, delay, and then remove them from that group. Now if you have root/sudo and you can edit this script which also has the required permissions to use the dseditgroup tool to make these changes to your user&#x27;s gropu then you could just remove the part that removes your user from the admin group.</p><h2>My Opinion on MDM</h2><p>I get it, there are so many good reasons for MDM. But wow, it is such a time suck and productivity killer sometimes. Not to mention resource hog and destroyer of system settings at time. I could go on and on. It would be great if companies could just find an acceptable level or risk that still allows their employees to at least have root access on their dev machines.</p><h2>Why Write This?</h2><p>Because I think all engineers should have lower level knowledge of how the operating systems they develop on and deploy to work. And with this knowledge comes the ability to quickly debug issues, write more secure code, and generally be more productive.</p><p>And maybe this post might help instill some interest in topics like syscalls, auditing, and logging in general.</p>","scope":{"slug":"jamf-and-the-power-of-tracing-and-logging","title":"JAMF and the Power of Tracing and Logging","date":"2023-02-02","author":"bebrws","tags":["Tracing","OSX","Debugging","Logging","Reverse Engineering","JAMF"]}}},"__N_SSG":true}